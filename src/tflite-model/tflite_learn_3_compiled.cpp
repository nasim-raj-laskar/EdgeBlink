/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.08.2025 11:55:29

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0030189927201718092, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 18148, -32690, -31359, -27098, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00028399421717040241, 0.00018366091535426676, 0.00018883611483033746, 0.00022922515927348286, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 60,-21,-41,-24,59,-13,16,-24,82,58,90,78,-40,-11,50,8,16,0,-61,27,-45,96,-19,127,5,-1,7,62,79,-23,30,2, 
  /* [1][0][][] */ 14,76,-100,-9,-16,33,68,38,-23,-87,-62,42,86,-69,43,-127,107,-110,29,-33,31,-78,-53,-43,-5,-59,48,-54,-78,-93,-25,-13, 
  /* [2][0][][] */ -1,94,27,70,-12,-7,70,41,-48,-127,66,-65,-78,64,-81,47,46,35,40,-44,-15,-7,-6,-23,31,-19,69,-74,-1,23,58,49, 
  /* [3][0][][] */ 61,-53,56,-21,-34,77,8,-5,16,-127,8,48,57,-34,-71,-36,80,-59,67,11,-82,0,-14,-11,60,-19,-67,58,-81,81,24,40, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.005627132486552, 0.0036391033791005611, 0.0037416459526866674, 0.0045419246889650822, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -995, 119, -414, -306, -1531, -73, -795, -73, -1157, 1909, -821, -454, -269, -157, -346, -187, 194, -1094, -14, -1187, -517, 1098, -1178, 210, -120, -1272, 147, -132, -150, -713, -506, -562, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.7281144108856097e-05, 6.8949440901633352e-05, 5.6938188208732754e-05, 5.5947573855519295e-05, 5.1111241191392764e-05, 7.0676978793926537e-05, 4.9631751608103514e-05, 5.8553254348225892e-05, 5.2450577641138807e-05, 7.7054290159139782e-05, 5.6898792536230758e-05, 6.9654066464863718e-05, 5.0968745199497789e-05, 5.842825339641422e-05, 7.0413821958936751e-05, 5.0957703933818266e-05, 5.4134008678374812e-05, 6.5722262661438435e-05, 6.4157662563957274e-05, 5.0768849177984521e-05, 6.79105578456074e-05, 6.0897589719388634e-05, 5.0530419684946537e-05, 7.8371609561145306e-05, 6.2023616919759661e-05, 5.1552175136748701e-05, 6.9020192313473672e-05, 5.0468701374484226e-05, 5.4713425925001502e-05, 6.7029606725554913e-05, 4.2941810534102842e-05, 5.5061551393009722e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -70,-41,44,-38,56,-53,-86,-92,8,-115,-110,-48,15,-27,-37,30,-38,-24,-71,-51,-66,-107,-29,76,-111,-30,48,-45,70,-11,-50,-81,27,-84,-93,27,-83,-97,-91,20,27,-94,-124,63,14,-101,40,-18,27,-41,-25,15,-79,-34,-93,40,-5,42,60,-117,-54,52,-47,3,-21,-11,48,57,27,45,26,-123,50,-123,11,52,-83,16,-70,13,12,-26,37,-53,-73,-32,-96,81,-6,65,-30,-127,-31,54,31,-21, 
  /* [1][0][][] */ -19,29,-38,-14,-20,60,21,30,62,-51,-63,60,53,-9,37,50,67,-23,56,56,-11,-2,-1,-7,24,27,-14,71,6,22,69,-35,22,90,-10,35,-2,30,1,-64,-33,-3,-46,-56,-13,39,8,-44,-42,-84,81,29,1,74,-40,-44,24,56,-12,46,-52,83,-34,-64,-34,41,66,42,76,-4,19,8,-57,23,-20,28,59,-82,-27,42,-64,47,-26,-127,23,83,-78,-49,50,44,81,17,71,107,4,-18, 
  /* [2][0][][] */ 8,15,-82,66,-9,-65,52,98,-127,58,-65,98,57,-70,71,-63,-33,-5,48,63,-90,-33,78,44,-8,46,109,-6,-32,83,31,46,-102,-44,-59,-95,-40,58,92,16,-114,-108,8,-2,-58,97,-35,-38,102,-40,75,-115,-33,5,41,16,-50,97,-50,-38,16,42,-37,62,80,9,62,59,-78,61,-4,-78,42,-54,40,19,-46,13,10,27,20,-97,5,-54,-12,-81,-55,0,58,100,-28,-17,-46,-53,-88,-64, 
  /* [3][0][][] */ 79,-22,23,-27,-44,20,-91,60,29,48,38,-10,85,77,82,20,64,88,9,4,94,-76,-83,-100,-48,-58,-37,61,38,-49,76,-19,-76,-5,-15,21,-91,-29,42,33,-33,-102,-95,1,54,40,-8,-64,37,-92,45,-48,65,4,93,-94,-60,-85,-127,-100,-91,30,-31,48,48,-20,-16,-9,-22,-60,11,70,37,-113,57,-49,4,35,57,-53,-85,-122,48,-9,24,28,-77,-94,-71,29,25,-90,107,-9,-108,15, 
  /* [4][0][][] */ 18,51,-29,20,-58,-54,-6,-12,16,50,-35,93,-3,-62,-45,-87,-52,-37,-83,-23,54,-67,47,22,-48,-39,20,-85,-69,-5,-86,-78,26,62,-17,-118,-73,-32,-121,19,-76,-85,-22,-102,-4,55,21,12,-12,-62,-50,-98,-100,2,-74,33,2,-106,54,-14,-27,-92,-68,-81,-75,11,-34,-66,-13,-86,-112,-100,-67,-8,58,9,16,-50,-37,-84,-27,-69,-111,-35,-21,23,96,-31,-127,-91,2,21,11,50,-114,-42, 
  /* [5][0][][] */ 24,-42,11,32,26,-67,23,37,56,-127,-1,-46,1,-22,24,30,50,48,-62,71,18,-9,17,-10,-55,-88,2,-45,36,27,-33,-57,-53,-19,-42,-13,-50,-28,29,32,-58,-37,16,66,-11,5,-54,-16,-44,28,18,10,20,19,14,-22,29,40,-29,-29,39,-34,30,-45,-16,54,-7,20,49,-3,38,-56,-35,53,-12,-40,19,-8,23,67,52,28,18,34,-68,58,-47,38,18,-52,65,20,-32,15,26,-61, 
  /* [6][0][][] */ 15,-52,86,51,-80,-81,-16,64,-64,-72,-14,-91,69,20,106,-101,27,-5,9,76,-78,-123,60,31,-109,-77,-1,-62,-20,-90,27,-72,-127,-105,-46,-83,-16,10,-104,65,50,-4,-3,-23,-100,84,-82,-39,-99,-28,-33,-110,35,-67,80,-36,-12,-10,-118,72,-84,-1,43,-85,-56,55,99,-40,66,-19,-111,-22,49,-88,-79,-46,-83,-99,-75,-29,9,-53,32,-89,-68,-88,-88,-97,40,52,87,1,-36,-36,23,-62, 
  /* [7][0][][] */ 91,60,-34,-51,-50,94,-18,20,92,2,-72,1,45,-73,53,64,44,18,26,73,55,12,-25,42,-47,80,46,47,-57,98,-17,32,-7,35,40,86,-94,47,-1,-29,74,-66,29,56,48,7,92,-80,25,-87,-73,-59,-29,86,18,2,84,-68,-41,-50,8,7,67,-103,-49,-25,68,30,-70,-1,46,58,69,-22,52,42,-36,-2,-71,37,46,-32,-7,-106,60,37,-127,75,53,-2,79,38,-29,12,-21,-74, 
  /* [8][0][][] */ -13,-1,-67,-91,22,0,-84,-54,-16,10,8,62,-27,-58,-101,-90,-77,52,-79,-11,-2,-45,43,73,-122,50,6,34,-82,-16,-102,72,66,-54,11,-29,69,-21,-47,29,45,64,-120,-127,-31,-48,-51,61,1,-82,-84,-10,-81,-35,-49,-107,28,59,-95,62,64,7,10,65,-57,-66,-50,53,-100,32,5,-31,31,36,-24,-6,-65,76,42,32,0,65,-125,-12,-6,10,51,-61,4,-57,-97,56,-67,-114,-64,36, 
  /* [9][0][][] */ 16,88,98,45,65,-54,-12,-87,74,66,61,23,6,19,-60,-14,11,5,-71,-23,52,106,17,-50,127,16,-10,73,10,-44,-30,75,84,12,61,11,29,37,1,-23,55,36,101,-35,38,16,-32,78,30,50,12,17,100,-31,-50,81,92,-31,65,53,-56,53,74,-11,4,22,43,33,0,68,119,4,20,78,-44,-39,-8,-35,56,117,84,37,93,70,19,-42,92,-20,105,71,-4,85,56,-23,116,-5, 
  /* [10][0][][] */ -82,28,62,-68,-11,40,48,42,9,38,9,-56,70,42,-41,7,-65,17,-82,-58,-36,13,20,-61,8,41,-76,-127,-39,71,-65,-103,44,29,91,50,-16,-8,-16,21,-63,31,-115,-57,-127,-81,6,-48,-43,-41,21,-9,49,-19,-44,-46,-84,-15,13,-74,-24,21,44,31,86,-97,-59,-66,-29,-39,-86,-56,73,29,-54,43,-49,44,38,14,51,-47,44,30,-79,28,48,-35,30,11,-35,-58,-31,-59,-60,-65, 
  /* [11][0][][] */ 55,32,-34,59,50,4,11,-1,87,43,-68,88,-20,-49,11,-61,-55,-77,38,29,38,62,6,-87,-43,-74,-31,52,26,-31,-7,-62,-27,-63,16,-1,-53,98,-38,-65,-51,57,20,-20,-26,-24,-28,-52,24,113,60,39,-78,-42,-6,8,-74,-61,-30,-30,-50,20,53,-14,-1,31,-58,-7,14,47,20,-70,6,127,-82,21,-25,33,0,77,-81,-22,-60,-41,22,-34,18,-3,-71,-19,18,-85,-70,5,-39,33, 
  /* [12][0][][] */ -71,83,-101,-43,83,23,8,-23,-52,-9,10,-18,-113,-55,23,-67,-62,-21,-94,-56,29,-75,43,75,-48,-118,66,-59,74,3,-84,125,-36,-86,-81,-12,25,-65,-48,52,125,63,-99,-23,2,-91,-93,117,-18,-79,-66,113,-7,40,-106,25,-45,-46,74,94,82,112,12,26,82,35,-48,109,56,56,-45,41,-13,116,-39,13,2,44,-69,-72,-97,107,21,57,-107,56,-7,123,-127,-95,55,-29,64,-17,28,45, 
  /* [13][0][][] */ 105,-91,79,61,76,60,43,86,54,-55,-8,-24,87,49,87,-1,-101,-35,5,24,62,-28,55,-37,-68,55,43,-19,-53,-23,76,-20,-15,107,-13,59,-64,-32,42,56,-92,4,-55,15,-62,58,27,2,3,33,5,-127,-71,-21,102,-73,-14,35,-45,-123,-49,81,-51,5,-18,-52,-28,84,-13,5,82,-5,-38,3,-32,-45,-117,34,41,-49,30,-119,97,-62,-52,-92,30,83,-7,-34,-13,42,102,44,14,-29, 
  /* [14][0][][] */ 23,-79,48,74,42,11,2,-91,-61,43,30,60,-26,-14,-67,-76,12,-60,52,0,-38,21,-16,48,-91,-13,-40,-1,-84,-94,-17,102,100,48,-29,31,41,59,1,-86,84,-73,63,41,127,-70,79,-75,84,75,27,32,48,-21,14,23,31,-11,15,60,-29,-42,-34,40,-76,68,25,-73,-68,4,-59,50,-11,40,12,-48,21,-80,16,6,26,85,-85,65,-90,-73,-66,45,48,-12,47,3,91,94,-7,47, 
  /* [15][0][][] */ 30,-49,4,72,109,-100,33,-23,38,47,-53,44,120,0,-41,-54,50,9,-18,25,34,27,24,127,59,100,76,53,33,88,102,-118,-28,13,-36,28,-40,86,118,-45,6,63,-45,-20,19,-41,9,-61,-28,-96,15,14,-60,-127,3,5,96,73,-70,62,-66,-58,-28,104,-13,74,-11,-7,-66,39,60,-39,58,-35,82,-101,-32,40,74,63,-58,9,-48,-15,-91,-53,-108,7,89,78,-80,15,113,117,-104,77, 
  /* [16][0][][] */ -66,19,65,-60,44,98,-34,48,45,16,-77,56,-9,-64,-26,-34,100,78,63,62,101,43,-29,40,-13,33,-34,67,-68,31,18,20,-92,65,49,51,-8,36,-31,-38,22,-37,48,85,66,81,65,9,-31,-127,16,75,-32,113,57,29,15,83,46,9,114,101,42,44,52,22,-10,87,48,70,-31,-8,29,65,63,76,10,93,-68,11,0,-62,54,-38,5,96,37,25,57,20,-4,72,60,-4,-75,11, 
  /* [17][0][][] */ 11,-85,18,42,-57,-93,-76,-45,29,-77,41,26,66,23,-84,14,-4,18,59,57,-68,7,-21,-58,-6,22,-62,-8,47,-50,-62,25,-45,-39,-3,-16,-52,55,-63,-45,-96,-80,-53,-24,-21,-8,45,-83,35,42,-27,-7,-36,24,54,-53,-127,31,-94,-110,2,-78,26,36,-79,-77,17,-86,-97,-16,75,5,5,-88,-47,21,62,-50,8,-47,-14,-34,-81,-96,-65,31,19,-37,0,37,-78,-88,-7,54,-8,-1, 
  /* [18][0][][] */ -64,63,50,-50,-4,-72,-62,9,-18,19,-89,-41,-23,11,48,-28,25,-4,51,-5,66,-45,-5,-56,19,-65,6,74,18,34,-8,26,-9,-19,-78,-77,-13,28,-15,59,-33,-8,-30,0,-70,15,-20,4,28,-21,51,4,-86,-11,15,53,-44,35,-66,-99,68,78,13,31,-43,-85,-16,66,51,-51,-39,55,-55,-12,-47,-66,34,49,4,-29,-51,-5,-9,-66,66,-22,12,53,-127,-44,-37,53,51,-21,1,-9, 
  /* [19][0][][] */ -11,-2,43,14,26,-39,57,53,56,-55,3,-31,-103,9,-76,23,45,-112,59,22,-45,45,-62,6,49,-93,-3,-85,-105,-126,-62,6,55,-101,8,-36,-13,-80,-70,-108,16,-120,-54,-15,-106,-6,58,-109,-47,4,-63,16,-48,-13,-17,-19,48,57,0,-45,20,-68,55,31,-85,-30,-51,-32,-38,69,46,-62,-71,-123,-72,-93,-46,-117,-10,62,30,-104,-49,127,-94,-34,19,-30,55,1,-37,44,-61,60,44,-64, 
  /* [20][0][][] */ 33,22,68,62,-61,114,34,13,30,37,-64,13,-12,84,27,-64,-20,-41,-55,-39,16,-46,-69,-55,23,-40,-84,16,0,-5,8,127,86,75,-32,61,1,-39,-26,-81,-3,-33,-76,-73,7,-45,-48,38,24,-75,-81,57,10,103,40,8,74,32,44,87,59,-4,-54,-36,-36,9,-51,15,-47,-59,-56,40,-64,-72,-3,18,70,24,44,42,32,63,30,71,19,76,-20,41,-4,35,12,98,93,17,6,9, 
  /* [21][0][][] */ 17,65,73,-53,99,-76,20,22,-1,-54,-42,38,-19,12,-26,-47,-86,-56,20,-2,108,-31,70,-78,96,-54,-17,70,31,15,-8,-48,3,-27,-50,-50,120,66,-69,-75,-30,32,27,-42,-82,-90,-60,108,-49,-46,47,101,65,20,-79,17,20,-7,-15,42,36,-85,24,18,92,1,-17,-75,-62,-4,52,88,33,-24,60,61,-98,0,79,80,52,74,35,-29,31,-64,91,-38,-40,86,83,-127,-35,-27,79,-28, 
  /* [22][0][][] */ 0,-74,-89,-110,49,-75,65,47,-103,84,-91,-81,70,-121,-125,-100,5,45,-101,-78,48,-61,0,1,53,10,-125,58,-77,-94,-83,-121,36,25,-11,-16,-25,-2,-77,-126,-26,-39,-25,53,20,-127,86,-46,-31,-95,-23,-42,-82,-106,-37,2,-5,-53,-46,-53,66,-92,-93,-125,-84,-11,-124,-66,68,107,-44,-30,-84,17,28,-105,10,-71,28,53,64,-111,-91,-126,40,45,58,-56,-75,1,-83,24,11,-10,-53,101, 
  /* [23][0][][] */ 74,-59,12,83,49,-69,9,-82,32,1,52,127,13,-37,-3,-34,41,-39,-45,46,40,-22,56,0,2,9,29,-2,31,5,39,-11,22,27,16,28,43,0,-73,-7,7,1,55,-70,-26,-52,79,3,20,53,-62,21,44,-60,-21,81,8,-19,62,91,-79,-57,-44,-7,7,11,-85,-70,27,61,73,-34,-4,-1,-31,-49,12,-15,46,56,-15,6,7,1,72,-20,112,-31,-52,12,52,25,109,-5,6,91, 
  /* [24][0][][] */ -66,-27,-98,-53,-57,-90,-45,-48,29,73,53,33,78,6,-17,-68,-52,45,26,-25,64,-73,-42,-19,30,-29,70,45,83,53,-10,-59,-32,-4,40,14,-18,-74,49,7,-66,-100,70,13,25,-27,10,65,-45,-69,-12,-21,50,28,59,-55,-21,68,10,-28,82,3,31,68,-64,58,-16,-58,-66,39,-45,-26,-18,22,78,72,50,-32,-60,-41,-61,-75,-36,-127,-6,43,-39,-57,6,-64,3,-69,-14,33,-98,8, 
  /* [25][0][][] */ -103,-77,-93,-43,43,-97,-118,17,11,-119,-63,-7,30,-29,-120,-47,-96,20,3,-120,27,43,-38,-84,-13,-78,-114,1,27,-104,-3,63,40,-124,5,30,54,-78,-47,-43,-107,49,-115,-26,51,7,27,2,-115,49,-92,-34,5,-49,-79,-24,-36,13,-117,32,69,3,13,4,-32,31,-43,-36,-107,-30,-48,-127,1,-122,32,-15,28,35,-15,-11,12,3,-68,35,-91,-71,-125,-104,-47,-60,59,-14,-81,-40,-53,-49, 
  /* [26][0][][] */ 60,-66,3,-14,-55,9,-7,15,-50,-55,71,43,-29,-10,32,-5,66,17,-13,-69,32,54,22,-23,35,64,11,32,7,21,-42,10,-33,-6,-70,-42,-81,47,-25,39,-53,58,14,22,-36,66,10,39,-45,-9,8,58,-5,-4,6,-75,71,27,-16,17,-24,-46,46,-28,72,14,-20,56,-40,30,67,68,66,-101,-45,5,34,-107,-69,-11,-33,45,57,-80,62,10,-59,-6,-50,55,35,21,-16,127,26,48, 
  /* [27][0][][] */ 4,-10,-60,-82,-112,-86,-65,-29,12,76,40,-84,-36,72,34,-14,22,-39,33,-48,-109,54,41,10,-67,22,-88,-18,55,1,-56,-27,111,31,-29,-92,-49,-11,-97,74,-95,9,60,19,52,7,58,114,87,118,20,-82,-32,-94,-19,-1,75,-15,-31,9,-24,-100,-56,48,5,-62,-111,63,12,29,-72,-5,56,3,6,-91,19,-27,119,127,120,-31,117,96,-2,-96,78,44,-11,29,-50,-56,26,-37,77,99, 
  /* [28][0][][] */ 88,-10,54,36,-96,-55,-77,-71,5,-85,46,54,-64,-26,-11,73,69,86,-40,55,-18,33,-63,-66,-47,64,-78,-59,-64,-81,4,-12,-80,18,61,47,-6,-80,-44,17,77,116,-70,27,-71,-1,21,49,38,28,-80,40,-73,15,35,44,43,-17,127,89,-18,-51,-82,8,41,46,-29,56,-74,22,-77,-43,47,22,-11,-90,-70,-53,-1,36,-63,-44,88,54,64,-65,80,-93,-83,-47,-28,-59,-51,30,-46,-52, 
  /* [29][0][][] */ 1,1,8,-34,-70,-11,-96,27,29,-27,-90,-54,62,-127,-25,-13,-56,76,29,-17,-74,-34,39,26,-43,-28,-1,-43,-47,15,32,-27,-3,-35,-34,-74,19,61,9,94,-4,24,-24,56,-5,59,-63,4,33,-47,37,-102,52,-102,91,38,-82,60,-26,31,-47,57,-74,-21,-29,-73,55,41,50,-36,16,-65,86,60,55,5,51,-8,-9,42,-4,-74,7,-77,27,48,-4,73,-29,79,31,28,-80,6,-40,28, 
  /* [30][0][][] */ 12,-64,-66,16,-108,14,-80,-13,114,-27,0,-48,-108,8,57,8,-10,32,90,-112,39,-103,-115,8,-111,10,-68,113,-16,-108,-104,-7,-97,-85,-127,-59,16,-27,-4,19,80,-88,-11,89,86,-43,97,61,-70,56,17,-104,87,-52,-27,84,-82,-67,-81,-55,-105,-18,-73,-45,-109,-95,-94,79,-63,96,40,-42,-99,101,37,-96,-59,-72,-74,-61,20,4,-106,-28,-106,30,-111,107,-39,-115,71,41,-48,-2,4,-83, 
  /* [31][0][][] */ 52,-87,8,74,44,19,-54,-69,-48,-4,-90,-98,71,-127,-33,99,-42,-61,61,45,36,2,-35,78,25,-84,47,26,-42,-44,32,52,-44,1,-66,1,93,-34,-57,-78,8,-82,-30,16,6,-37,-40,42,68,-31,79,-66,-92,-100,-52,8,-67,61,-15,27,-22,-13,70,-59,58,72,-13,-60,55,-78,-102,-16,-68,-50,11,-2,-58,-20,46,90,-67,-60,59,-24,41,65,-116,16,5,-33,-58,-68,10,100,-49,-27, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0024344485718756914, 0.0029303513001650572, 0.0024198729079216719, 0.0023777717724442482, 0.0021722277160733938, 0.0030037714168429375, 0.0021093494724482298, 0.0024885132443159819, 0.0022291494533419609, 0.0032748072408139706, 0.0024181986227631569, 0.0029602977447211742, 0.002166171558201313, 0.0024832007475197315, 0.0029925873968750238, 0.0021657024044543505, 0.0023006952833384275, 0.0027931961230933666, 0.0027267006225883961, 0.0021576760336756706, 0.0028861986938863993, 0.0025881475303322077, 0.0021475427784025669, 0.0033307932317256927, 0.002636003540828824, 0.0021909673232585192, 0.0029333580750972033, 0.0021449197083711624, 0.0023253206163644791, 0.0028487583622336388, 0.001825026934966445, 0.0023401158396154642, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 771, -385, 2778, 3480, 4009, -2565, 4584, -1908, -2612, -902, 3729, -2322, 3550, 4913, 1495, 2095, -663, -475, -1394, 5498, 2267, -276, 2256, -802, -915, 2474, 1273, 2169, 6087, 2354, 3346, 1238, 2528, 3440, 4939, 2485, -738, 2437, 3291, -3893, 158, 841, 434, 1677, -1393, 262, -3024, 682, -6730, 1686, 1296, -3186, 8054, -704, 1434, 1410, 1320, 2635, -944, -3359, 1, 1790, 351, 3255, 5944, 3114, 2107, 5987, 4286, -1594, 3853, 4655, 3010, -1238, 5925, 7830, -81, -3984, 390, 530, 6577, 2678, -679, -1278, 835, 601, 2432, -2210, 4637, -746, 3042, 1415, 464, -2182, 77, 954, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00017197188572026789, 0.00019272233475930989, 0.00020603337907232344, 0.00019381211313884705, 0.0001531159650767222, 0.00014612972154282033, 0.00012680207146331668, 0.00016361803864128888, 0.0001658349356148392, 0.00021882647706661373, 0.00016287392645608634, 0.00021094670228194445, 0.00014619668945670128, 0.00012172241258667782, 0.00020361097995191813, 0.00019695897935889661, 0.00018171282135881484, 0.00024603886413387954, 0.00021956711134407669, 0.00010724856838351116, 0.00018774833006318659, 0.00017212066450156271, 0.00011320414341753349, 0.00018428638577461243, 0.00019661050464492291, 0.00024798803497105837, 0.00015931249072309583, 0.0001571953616803512, 0.0001036339090205729, 0.00016959993808995932, 0.0001463076623622328, 0.00018910046492237598, 0.00014258435112424195, 0.00018521440506447107, 0.0001167873851954937, 0.00020407575357239693, 0.00016402386245317757, 0.0001809331588447094, 0.00012471336231101304, 0.00013937476614955813, 0.00024852989008650184, 0.00013326157932169735, 0.00018875715613830835, 0.0001611815532669425, 0.00019639545644167811, 0.00023714899725746363, 0.00013793462130706757, 0.0001501074293628335, 0.00011366829130565748, 0.00013834217679686844, 0.00018483510939404368, 0.00013487687101587653, 8.0592893937136978e-05, 0.00020104675786569715, 0.00021403450227808207, 0.00018265150720253587, 0.00019158302166033536, 0.00013820834283251315, 0.00017106844461522996, 0.0001088347053155303, 0.00018531222303863615, 0.00014668997027911246, 0.00017903328989632428, 0.00017192277300637215, 0.0001080239744624123, 0.00014760861813556403, 0.00013227066665422171, 0.00011832930613309145, 0.0001512980816187337, 0.0001718652929412201, 0.00015315829659812152, 0.00014319979527499527, 0.00011786026880145073, 0.00017844939429778606, 0.00010320209548808634, 9.68723907135427e-05, 0.00016362212772946805, 0.00015934040129650384, 0.00011444438860053197, 0.00021516763081308454, 0.00012214909656904638, 0.00013207178562879562, 0.00013120232324581593, 0.00019028212409466505, 0.00020427437266334891, 0.00016545086691621691, 0.00023756946029607207, 0.00018842983990907669, 0.00013552715245168656, 0.00015167240053415298, 0.00018718550563789904, 0.00016408298688475043, 0.00016876032168511301, 0.00018684874521568418, 0.00024690758436918259, 0.00018849186017177999, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -26,84,-68,28,72,-22,46,42,-44,36,18,-66,61,127,-76,36, 
  /* [1][0][][] */ -51,-32,-30,-6,-16,16,26,-127,38,-24,-41,-49,-14,-79,-63,6, 
  /* [2][0][][] */ -36,-25,31,74,34,47,-124,127,-24,20,79,-54,-13,-74,-70,75, 
  /* [3][0][][] */ 79,-75,46,-3,0,-19,-52,127,-23,60,59,31,-7,91,-4,5, 
  /* [4][0][][] */ -22,-90,28,74,-107,-10,-47,-127,30,14,20,-17,39,46,120,64, 
  /* [5][0][][] */ 127,82,-35,-52,-68,69,47,78,39,-24,79,95,122,22,-120,3, 
  /* [6][0][][] */ 27,9,-59,-43,-70,37,-28,-30,-51,-36,-34,6,94,71,127,3, 
  /* [7][0][][] */ -82,35,-43,-100,-2,-68,-90,-10,-107,74,-72,-65,-127,-51,-3,116, 
  /* [8][0][][] */ 29,44,75,7,69,11,61,17,70,-7,23,17,-127,-29,-83,9, 
  /* [9][0][][] */ -12,54,45,-22,-23,-2,47,4,-44,22,-31,19,48,127,47,-1, 
  /* [10][0][][] */ 82,42,-41,71,-37,-2,45,-7,-53,-39,-57,-117,-127,-49,20,62, 
  /* [11][0][][] */ 31,19,66,10,-12,-8,4,127,-67,40,-30,-13,-18,23,32,123, 
  /* [12][0][][] */ -67,-15,6,-7,49,-9,85,10,-77,52,-2,1,-24,80,-73,127, 
  /* [13][0][][] */ 6,66,-41,-28,127,44,67,53,-59,56,-28,-2,27,44,-50,20, 
  /* [14][0][][] */ -87,127,-19,-34,3,18,33,-18,-19,11,103,-11,-55,16,-54,62, 
  /* [15][0][][] */ -10,0,-127,-44,69,-22,-72,-21,-5,-17,-22,-74,-7,-73,-76,46, 
  /* [16][0][][] */ 101,21,-6,-27,29,-1,51,-20,-17,1,127,30,35,3,-40,40, 
  /* [17][0][][] */ -5,3,-4,-87,7,-65,87,-127,-25,1,-47,43,20,53,3,56, 
  /* [18][0][][] */ 16,127,-23,-61,73,-86,-34,-62,-26,124,-13,12,-37,47,-28,-11, 
  /* [19][0][][] */ -90,-72,92,-127,67,-83,30,-63,39,49,101,127,52,3,8,4, 
  /* [20][0][][] */ -28,122,61,-5,5,6,19,-37,67,-6,104,-20,-127,-33,-84,-4, 
  /* [21][0][][] */ -88,29,33,32,57,32,96,72,-127,57,-75,1,-43,13,-52,-42, 
  /* [22][0][][] */ 3,-91,70,29,25,-127,95,4,17,-37,-60,-72,5,-120,-62,-56, 
  /* [23][0][][] */ -58,-91,39,55,23,-13,-9,-58,16,-49,83,8,12,67,70,127, 
  /* [24][0][][] */ -1,11,32,87,30,30,-40,-127,89,19,-51,8,-8,7,-26,-29, 
  /* [25][0][][] */ -31,45,17,-67,-33,-6,-3,-37,-33,68,-52,-17,29,127,-21,42, 
  /* [26][0][][] */ -54,68,8,19,34,-106,-12,-47,9,7,25,89,6,-8,-83,127, 
  /* [27][0][][] */ -32,-121,-69,3,-68,127,-32,-67,32,-13,63,-67,44,-19,-124,-32, 
  /* [28][0][][] */ -17,13,46,108,23,34,-21,-113,-127,40,109,-42,72,28,-19,-59, 
  /* [29][0][][] */ -127,104,-18,-45,-20,4,-115,-72,-55,-36,4,12,9,-68,-85,80, 
  /* [30][0][][] */ 41,93,-64,60,-90,-78,-103,-44,-49,15,2,-104,127,48,-15,103, 
  /* [31][0][][] */ 127,25,-28,-7,-45,47,99,23,-39,-24,63,27,28,6,-1,-22, 
  /* [32][0][][] */ -56,-76,127,20,30,83,77,32,-44,41,-14,34,50,118,93,26, 
  /* [33][0][][] */ -10,94,-69,-82,-24,52,84,8,25,3,-20,-91,91,113,-127,89, 
  /* [34][0][][] */ -71,-14,113,34,0,-22,127,16,-114,35,16,-65,57,74,-38,-56, 
  /* [35][0][][] */ -2,67,-68,-23,-66,127,-17,-24,-11,72,16,67,-52,37,5,61, 
  /* [36][0][][] */ 5,-82,127,-33,-59,20,-48,5,26,7,-49,63,9,-66,-39,31, 
  /* [37][0][][] */ 55,27,41,-36,114,-42,-40,21,-43,127,-55,-1,-94,-11,55,-4, 
  /* [38][0][][] */ 28,44,-19,-126,-3,-96,-127,26,-118,53,-76,-20,-35,-105,-108,120, 
  /* [39][0][][] */ -87,-1,-34,-33,-64,-93,57,-15,-127,-22,11,95,19,-15,-10,39, 
  /* [40][0][][] */ 127,47,10,-74,-46,65,44,-24,-19,-31,-16,-43,0,8,47,-3, 
  /* [41][0][][] */ 88,-122,-47,-27,-20,-30,-94,7,75,-6,-33,-99,127,-72,83,-59, 
  /* [42][0][][] */ -32,-127,-35,123,15,-104,-87,2,5,31,7,65,-79,44,-74,-3, 
  /* [43][0][][] */ -98,-36,-45,-127,-42,-19,-6,54,26,-103,-28,49,-15,-64,-29,95, 
  /* [44][0][][] */ -44,3,55,-14,-65,-14,54,122,127,-95,65,64,112,30,15,-30, 
  /* [45][0][][] */ 1,76,-76,65,127,-79,-48,-66,83,-27,69,-43,-16,13,-94,68, 
  /* [46][0][][] */ -32,-36,23,1,84,-12,26,34,-1,127,-43,-115,24,69,-54,52, 
  /* [47][0][][] */ 102,-74,-1,22,74,-15,-36,-54,22,126,-55,9,-28,-127,-58,-17, 
  /* [48][0][][] */ 32,29,-29,-95,-24,-31,123,-127,-29,4,-39,26,77,85,13,8, 
  /* [49][0][][] */ -30,94,-44,70,25,-78,70,96,-28,38,20,-86,-17,77,127,-122, 
  /* [50][0][][] */ -2,45,-23,-4,-127,-15,-82,-72,58,97,27,38,-42,-38,-10,47, 
  /* [51][0][][] */ 127,-19,-60,-28,-33,110,-77,-41,43,-33,-27,68,-13,-84,2,50, 
  /* [52][0][][] */ 17,-21,77,122,-127,-61,-112,44,7,-91,-110,-123,-2,-57,32,27, 
  /* [53][0][][] */ 7,113,42,-119,9,127,68,-16,9,-10,1,-30,56,-87,8,35, 
  /* [54][0][][] */ 13,113,-4,-30,12,-89,-96,28,-8,-4,-34,127,60,77,-6,72, 
  /* [55][0][][] */ -33,-58,51,27,36,-37,98,54,-77,-9,20,20,127,23,19,-25, 
  /* [56][0][][] */ 127,39,21,17,-45,114,-29,-72,-8,17,-72,6,-64,86,1,18, 
  /* [57][0][][] */ -60,-29,-36,-50,-53,-104,25,-56,-127,-15,61,73,9,30,-33,96, 
  /* [58][0][][] */ 51,-41,50,28,7,-49,-30,16,36,-11,-127,-37,35,-19,-40,31, 
  /* [59][0][][] */ 84,51,-104,113,4,78,69,5,-91,-51,26,-113,-127,-46,64,113, 
  /* [60][0][][] */ 10,32,-17,14,-23,-15,-10,1,-49,-85,72,127,-24,-123,-11,-9, 
  /* [61][0][][] */ -48,24,68,-103,-44,30,2,84,-32,-77,55,77,56,-22,-3,127, 
  /* [62][0][][] */ 77,33,-5,-127,-37,38,12,-46,8,60,-45,37,7,-30,-96,-85, 
  /* [63][0][][] */ 8,-35,2,-5,-58,-77,-79,-8,-92,-18,-27,-6,127,4,67,-13, 
  /* [64][0][][] */ 23,27,-27,54,-120,-17,-48,-127,90,114,29,-13,36,-75,-42,107, 
  /* [65][0][][] */ -33,12,-10,-19,-75,82,-4,-37,59,-110,103,-59,63,57,-127,47, 
  /* [66][0][][] */ -90,115,-101,-56,34,9,-70,-42,-79,127,84,-29,-104,-8,36,7, 
  /* [67][0][][] */ -8,-31,-119,-127,81,73,12,-43,-19,-19,54,-9,15,27,13,61, 
  /* [68][0][][] */ 40,14,-16,-56,-45,26,23,14,-47,49,127,2,-17,-60,-117,1, 
  /* [69][0][][] */ 53,-116,82,-12,-5,-103,-19,127,20,67,45,41,-55,55,-32,-37, 
  /* [70][0][][] */ 29,28,70,10,97,-11,127,2,55,10,-49,33,-90,38,-97,54, 
  /* [71][0][][] */ 18,46,76,-68,-127,-47,14,20,-3,-17,22,-115,-60,23,15,18, 
  /* [72][0][][] */ -83,-124,39,-127,94,-24,3,25,-94,12,-126,-2,39,107,-65,121, 
  /* [73][0][][] */ 27,-3,62,-12,126,-102,-32,-18,-55,65,-80,57,-72,-86,127,-20, 
  /* [74][0][][] */ -127,-21,-124,-72,83,-90,-80,5,-109,19,-121,-16,-25,-61,-36,89, 
  /* [75][0][][] */ 82,2,50,-60,23,17,-127,-41,-10,-103,72,7,-1,-24,-26,8, 
  /* [76][0][][] */ 22,6,-33,110,29,127,84,-9,78,-114,55,71,19,-49,-53,34, 
  /* [77][0][][] */ -29,-43,127,-33,8,-50,-20,-121,3,17,42,105,58,28,35,24, 
  /* [78][0][][] */ -23,-22,34,-13,-4,-75,14,10,40,-4,-2,-104,-118,-49,-127,-66, 
  /* [79][0][][] */ -29,-32,8,46,127,46,-28,44,22,21,-18,15,-12,-19,-71,-37, 
  /* [80][0][][] */ 18,-88,83,127,-50,-25,-57,62,39,17,20,1,-69,-21,-16,9, 
  /* [81][0][][] */ 127,70,-19,59,-4,59,52,109,33,-18,120,48,91,-4,55,-17, 
  /* [82][0][][] */ -66,-11,12,-28,8,-127,-121,-105,5,77,-59,-44,-32,96,-64,-25, 
  /* [83][0][][] */ 127,-25,30,-52,4,-29,-122,-44,-21,-92,34,-32,-4,-17,1,-14, 
  /* [84][0][][] */ 13,-45,-107,30,127,60,12,63,-81,27,-106,-49,42,1,-90,17, 
  /* [85][0][][] */ -1,123,27,-72,91,53,52,-127,112,-35,59,6,86,-95,11,24, 
  /* [86][0][][] */ 127,-46,123,33,0,-54,73,13,-56,-67,-101,-28,26,3,-59,11, 
  /* [87][0][][] */ 0,6,8,-79,50,-25,-29,0,24,-52,80,-21,-54,-127,0,22, 
  /* [88][0][][] */ -67,-11,32,-19,2,37,-64,-67,-8,9,-60,-127,-45,-53,-36,-1, 
  /* [89][0][][] */ -70,48,12,-67,15,29,-127,32,96,44,-66,-22,2,-61,-43,-8, 
  /* [90][0][][] */ -3,12,-38,-97,127,77,-54,35,55,48,40,-12,48,5,-68,-17, 
  /* [91][0][][] */ -33,-33,20,38,-45,38,7,64,-43,-88,42,-32,5,52,41,127, 
  /* [92][0][][] */ -49,117,-17,-33,-32,78,-108,43,-16,-10,72,-1,-26,127,40,48, 
  /* [93][0][][] */ -27,98,-35,-80,53,81,-91,23,84,65,38,29,-127,43,-65,102, 
  /* [94][0][][] */ 13,55,78,13,-127,-30,11,2,36,-19,18,-37,-43,3,-26,-33, 
  /* [95][0][][] */ 10,72,0,8,127,17,-111,100,33,10,-39,60,-44,42,69,-23, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0017749691614881158, 0.0019891401752829552, 0.002126527251675725, 0.0020003882236778736, 0.0015803519636392593, 0.0015082451282069087, 0.0013087590923532844, 0.0016887467354536057, 0.0017116280505433679, 0.0022585683036595583, 0.0016810665838420391, 0.0021772389300167561, 0.0015089362859725952, 0.0012563305208459496, 0.0021015249658375978, 0.0020328678656369448, 0.0018755079945549369, 0.0025394347030669451, 0.0022662125993520021, 0.0011069419560953975, 0.0019378021825104952, 0.0017765047959983349, 0.0011684111086651683, 0.0019020704785361886, 0.0020292710978537798, 0.0025595526676625013, 0.001644308096729219, 0.0016224565915763378, 0.001069634105078876, 0.0017504876013845205, 0.0015100815799087286, 0.0019517579348757863, 0.0014716523000970483, 0.0019116488983854651, 0.0012053947430104017, 0.0021063219755887985, 0.0016929354751482606, 0.0018674609018489718, 0.0012872009538114071, 0.0014385252725332975, 0.0025651452597230673, 0.001375429448671639, 0.0019482144853100181, 0.0016635991632938385, 0.0020270515233278275, 0.0024476801045238972, 0.0014236611314117908, 0.0015493001556023955, 0.0011732017155736685, 0.0014278676826506853, 0.0019077339675277472, 0.0013921012869104743, 0.00083182146772742271, 0.0020750588737428188, 0.0022091090213507414, 0.0018851964268833399, 0.0019773810636252165, 0.0014264862984418869, 0.001765644527040422, 0.001123312977142632, 0.0019126584520563483, 0.0015140275936573744, 0.0018478519050404429, 0.0017744621727615595, 0.0011149451602250338, 0.0015235091559588909, 0.0013652018969878554, 0.0012213092995807528, 0.0015615891898050904, 0.0017738690366968513, 0.0015807888703420758, 0.001478004502132535, 0.0012164682848379016, 0.0018418253166601062, 0.0010651772608980536, 0.00099984661210328341, 0.0016887889942154288, 0.0016445961082354188, 0.0011812120210379362, 0.0022208043374121189, 0.0012607343960553408, 0.0013631492620334029, 0.0013541752705350518, 0.0019639541860669851, 0.0021083720494061708, 0.0017076638760045171, 0.0024520198348909616, 0.0019448362290859222, 0.0013988129794597626, 0.0015654525486752391, 0.0019319930579513311, 0.0016935457242652774, 0.0017418216448277235, 0.0019285172456875443, 0.0025484010111540556, 0.0019454763969406486, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 21374, 16347, -10220, -2340, 2013, 13798, 1461, 1119, 25213, -4107, 1742, 4704, -9881, 6691, -1701, 12737, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 3.3484026062069461e-05, 8.6060907051432878e-05, 3.7306152080418542e-05, 7.1211550675798208e-05, 4.3301595724187791e-05, 6.6374974267091602e-05, 4.8820391384651884e-05, 5.567981133935973e-05, 6.9771005655638874e-05, 6.0164245951455086e-05, 3.3688222174532712e-05, 6.419369310606271e-05, 5.492130367201753e-05, 5.7468914747005329e-05, 4.6755216317251325e-05, 6.9378562329802662e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -106,59,47,-59,-54,-28,-110,-15,-22,1,-39,-49,8,75,33,-30,11,-36,95,-11,-16,-40,107,93,29,15,-28,63,-82,-92,-110,-8,-87,-97,30,7,7,33,18,42,-25,-32,-126,78,-96,7,1,111,-26,-13,-28,-9,-12,44,7,-48,-115,25,-37,127,97,20,-1,5,-7,-46,-82,-2,-92,-70,-20,8,43,30,-60,-69,-23,-23,-60,-11,-75,52,64,-116,25,63,-11,37,-10,-60,-28,-54,-64,-14,-82,-35, 
  /* [1][0][][] */ 30,36,39,-27,-59,-12,13,19,-39,-12,46,-64,-8,0,-20,-22,-30,46,-45,14,-11,-111,-3,47,-12,-54,-9,-29,54,-89,77,-51,60,52,-9,39,58,58,-16,-37,58,47,-25,-28,32,78,-127,-36,-73,-56,16,-23,45,-48,-41,39,-11,-25,-56,5,34,32,-18,-95,-38,-49,-41,-12,22,-59,-66,-39,-33,-64,-9,-74,22,16,66,-49,-29,-20,-81,-37,50,-62,-19,2,-96,28,-40,77,13,13,-31,69, 
  /* [2][0][][] */ 106,-39,17,6,24,-80,81,-8,34,8,-49,10,-69,-25,-31,-51,-83,-91,-45,67,16,-6,-32,49,44,-63,-2,-18,-26,63,-41,122,-60,102,-36,32,-24,-7,-7,-14,-127,76,83,7,-99,-24,18,-18,50,-5,-20,-70,33,9,-10,73,67,38,61,2,-13,47,-32,42,93,37,-6,-6,17,119,-53,20,57,72,101,28,18,-82,25,57,69,-37,-51,58,-73,76,15,90,51,-37,-50,9,-30,46,-10,29, 
  /* [3][0][][] */ 13,-7,-28,-8,25,-3,-7,-55,2,56,30,62,14,-13,-57,38,24,-55,14,5,15,127,32,-34,3,26,-17,-6,41,-32,64,-26,-39,-1,-10,-14,11,65,15,5,-74,-47,-17,18,-36,6,17,-7,-6,-38,-12,-5,28,-42,-11,-33,13,89,-2,10,-26,-4,-19,21,41,57,-43,1,-32,29,-2,-34,-19,-8,50,-4,-3,9,-58,-35,-1,0,-35,17,-26,-8,24,-10,12,3,16,-39,28,37,-39,34, 
  /* [4][0][][] */ 51,18,-20,-3,22,27,-51,8,-19,64,91,3,-25,-29,7,-54,2,14,-30,53,-9,-87,62,127,-65,-3,-119,-3,-48,-91,7,41,-48,-32,16,56,42,54,26,23,-13,-20,38,-24,6,-4,-72,50,-31,35,17,22,35,-21,-78,-7,23,-29,32,-27,25,-10,10,15,-54,25,-21,37,-55,44,-52,27,31,-66,-47,-54,30,-40,11,-14,-44,84,-58,3,-27,26,30,-56,58,15,27,2,-80,-19,57,50, 
  /* [5][0][][] */ -70,44,10,-28,36,-19,54,-53,27,24,-39,-38,11,9,-10,-56,-13,-49,39,-8,-127,-42,-98,35,-43,-2,27,35,28,-44,-27,21,33,75,-20,59,-4,1,46,20,-39,78,48,-7,-13,93,38,12,-16,-13,2,1,10,-6,46,-74,50,-27,-93,-33,90,92,-62,-8,61,-39,-96,-97,-89,-25,-94,-2,8,-2,9,-48,22,-64,-63,-11,113,-32,-3,-111,-65,49,28,-13,-69,35,7,-11,2,64,0,50, 
  /* [6][0][][] */ 46,24,-85,1,-24,-107,74,73,-44,59,-8,44,-127,-76,54,48,22,-101,-14,10,-9,-4,-74,-71,-44,46,56,12,-1,52,79,-63,40,-10,10,-33,-1,14,25,94,-37,23,-75,20,34,-69,-100,15,33,-87,-35,49,35,-7,-22,-59,54,81,11,-24,-66,64,-62,16,47,11,-18,34,13,55,-30,-17,-42,56,74,45,40,-61,8,-70,17,-68,-67,-2,-27,-46,66,-14,-41,49,50,12,-26,40,-44,94, 
  /* [7][0][][] */ 17,76,-31,-51,-30,-29,43,8,-46,28,-36,-57,-18,29,2,-13,-34,-55,-23,43,9,127,-5,13,-29,10,15,13,32,30,93,-6,54,13,3,2,-15,14,10,28,-61,-27,11,-39,19,-47,70,-26,16,-53,-77,-33,-48,21,-9,-25,19,20,-51,3,-10,80,13,-23,-8,-7,-32,-8,-30,-7,-77,44,9,75,-21,29,-42,20,-1,-47,-17,-37,37,-54,26,-16,-5,-8,-20,37,-56,38,45,-27,-31,-10, 
  /* [8][0][][] */ -12,96,-42,50,-52,-17,-88,34,-106,-53,-15,-5,-69,43,65,79,4,-24,-17,-21,17,-17,-20,-29,-20,60,-32,20,-25,-6,-70,-54,-40,-87,-40,-93,-45,10,45,1,-2,-31,12,44,-15,-28,-10,-22,-12,-49,53,71,10,-4,-59,109,-45,33,-37,-44,-14,-1,15,51,-46,-68,-54,-29,-58,-6,-16,2,-14,-65,-113,-14,-28,48,-74,-31,-24,-14,-50,-40,-3,-23,10,25,-9,57,-70,23,-69,-127,18,-67, 
  /* [9][0][][] */ -13,-4,-54,28,-12,-43,60,16,-21,32,-33,95,-7,-12,10,115,15,23,58,-3,36,27,42,-73,-61,4,38,-29,18,-37,57,64,-31,1,3,-127,24,2,4,-35,1,18,59,-55,-15,-24,39,8,32,67,12,-21,-49,-62,6,-17,17,-11,78,-3,-80,56,-54,-18,68,3,-31,38,-69,17,14,21,-14,83,-22,-20,-48,45,-28,-5,36,-20,64,23,26,-2,-19,-19,-44,37,-11,-16,52,4,-38,23, 
  /* [10][0][][] */ 81,-4,-40,20,-58,-44,96,17,-11,-57,-29,-35,-97,-2,36,-17,-95,-3,43,15,15,2,6,17,-35,65,23,16,-61,-56,-83,-25,66,-22,43,4,83,-126,100,115,36,-58,-22,13,-15,-60,-10,76,9,65,-40,-31,-9,29,4,52,3,-86,42,50,37,30,-72,-48,-40,-86,26,42,26,-66,-6,19,127,5,-4,-106,48,-80,87,-20,-69,10,16,-2,-13,-40,-8,27,-65,2,10,69,44,55,-13,6, 
  /* [11][0][][] */ -21,-27,10,-49,11,-14,-31,0,61,-20,-3,9,-34,3,-15,-3,-70,-19,59,22,-58,-11,-62,-52,50,-3,-3,56,24,-23,-4,-47,19,31,14,-25,-45,-1,-88,35,-44,44,-57,54,7,27,2,-18,20,-23,-26,-51,8,37,39,-46,-18,-24,3,-38,-6,-24,-11,-105,4,-66,86,41,127,10,107,-41,-14,-13,10,-44,102,8,36,36,-4,-42,-40,56,72,10,9,-20,-40,-25,-23,11,45,42,64,36, 
  /* [12][0][][] */ 35,2,6,-16,32,92,-39,49,37,25,28,54,41,51,31,-15,-83,-12,26,44,118,14,59,-82,16,8,-96,-29,-49,127,-1,3,32,11,14,-24,44,-7,3,-23,7,-35,34,63,-2,67,39,19,-69,45,-6,15,-32,-29,2,28,-22,35,-13,35,43,-105,-16,-106,-10,102,-15,-34,-16,-45,60,7,10,1,-24,30,18,-3,-77,5,-15,17,105,-37,13,53,-43,-81,41,13,-67,22,69,18,-25,-127, 
  /* [13][0][][] */ -26,50,-6,-20,5,-11,38,-24,-6,-11,-32,-85,82,-88,-6,-56,-24,-3,-80,-23,-81,-24,31,89,-63,-5,103,-15,21,-51,95,67,20,24,-90,127,-36,-16,39,-87,119,19,19,-11,15,-86,47,-33,68,-18,-58,31,37,-2,13,46,54,-61,-43,-23,26,4,-9,-83,-5,31,-18,29,-47,-52,-68,2,-70,4,-42,-67,-85,40,45,91,3,66,53,-73,59,24,5,-12,-56,-14,-1,22,-62,1,-9,2, 
  /* [14][0][][] */ 11,32,-75,-46,102,97,-88,-10,58,-15,63,23,9,-37,-58,-49,-54,-17,22,127,21,2,14,10,5,43,-20,65,-13,2,-3,-2,50,-33,-34,30,-17,85,48,8,44,-17,45,4,-29,-63,61,-32,46,-4,-12,3,28,42,-18,29,21,78,-57,4,-47,-59,-47,-60,43,-19,-39,-6,-71,88,-20,50,8,16,9,-37,27,1,-81,-11,48,12,5,1,-30,65,-11,-6,-16,37,45,-7,3,-25,-56,-75, 
  /* [15][0][][] */ -69,-40,58,-32,2,-30,-10,-65,-32,-4,12,45,10,-16,54,78,-127,27,31,-49,18,-60,-10,-53,37,-14,52,-40,-52,-111,-54,60,-3,92,74,-89,-1,-56,24,-32,9,26,19,-41,20,21,43,103,-57,2,18,-40,-24,12,1,-50,-84,-42,57,-3,-9,9,-85,2,-106,-35,21,24,64,-107,89,-63,32,-69,-55,-50,22,9,85,21,-35,64,43,18,29,-40,-104,-2,-21,-26,-53,55,27,-62,-3,86, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0014230710221454501, 0.0036575885023921728, 0.0015855114907026291, 0.0030264907982200384, 0.0018403178546577692, 0.0028209364973008633, 0.0020748665556311607, 0.0023663919419050217, 0.0029652677476406097, 0.0025569803547114134, 0.0014317494351416826, 0.0027282319497317076, 0.0023341553751379251, 0.0024424288421869278, 0.0019870966207236052, 0.0029485889244824648, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 2582, -6580, -1585, -2551, -4287, 9018, -4114, 1370, 214, -3064, 7888, -4276, 6852, 9384, 6944, -883, 16180, -3004, -6459, -1140, -3617, -1561, 2569, -1221, -236, -4354, 3123, -3592, 684, -5817, -3743, 776, 3445, -3643, -6643, -353, -4578, -1668, -1256, 8593, -771, -3317, -1555, -3123, 10390, 19224, -3523, 16599, 2601, 2221, 8164, -88, -580, 2808, 405, 5743, -4850, 1725, 14331, 8256, 7315, 11599, 11940, -6681, -1094, -2122, -2118, 1267, -1343, -892, -1816, 5668, 14297, 3567, -1604, 17819, -1869, 302, 7280, -3964, 2707, 13702, -1889, 6434, 12016, -997, -2134, -5566, 3647, -4696, 12152, -1249, -989, 4845, -3639, -1439, };
const TfArray<96, float> quant10_scale = { 96, { 0.00028959789779037237, 0.00014549978368449956, 0.00010384211054770276, 0.00029768457170575857, 0.00032062016543932259, 0.00027515494730323553, 0.0003194091550540179, 0.00023059984960127622, 0.00016560291987843812, 0.00014191889204084873, 9.2311354819685221e-05, 0.00018232829461339861, 0.00016801375022623688, 0.00011838423233712092, 0.00016122177476063371, 0.00017705067875795066, 8.827947749523446e-05, 0.00021515089611057192, 9.4964445452205837e-05, 8.7063541286624968e-05, 0.00022895607980899513, 0.00044072128366678953, 0.00025319331325590611, 0.00019606137357186526, 0.00051774666644632816, 0.00013263883010949939, 0.00027281357324682176, 9.9593613413162529e-05, 0.00013735076936427504, 0.00010549843136686832, 0.00039068455225788057, 0.00023477293143514544, 0.00022164869005791843, 0.00014973219367675483, 0.00014533424109686166, 0.00028148581623099744, 0.00013270006456878036, 0.00024280602519866079, 0.00038252887316048145, 0.00011787089169956744, 0.00019965071987826377, 0.00024298917560372502, 0.0001909788406919688, 0.00014889828162267804, 0.00012634957965929061, 7.5506985012907535e-05, 0.00019741379946935922, 9.9441480415407568e-05, 0.00015991466352716088, 0.00017112225759774446, 0.00014035686035640538, 0.00012317944492679089, 0.0001761729217832908, 0.00012756064825225621, 0.00025907845702022314, 0.00015118702140171081, 0.00020015989139210433, 0.00018399361579213291, 0.00010189149907091632, 0.00010457307507749647, 0.00017086566367652267, 0.00011572487710509449, 7.5897907663602382e-05, 8.8263506768271327e-05, 0.00016766626504249871, 0.00028307113097980618, 0.00032416536123491824, 0.00029933848418295383, 0.00022690117475576699, 0.00019762545707635581, 0.00022128396085463464, 0.00016383698675781488, 0.00010568697325652465, 0.0002499772235751152, 0.00035598152317106724, 6.3466715801041573e-05, 9.622282232157886e-05, 0.00016732336371205747, 0.00024073602980934083, 0.0002247863303637132, 0.00017445124103687704, 9.698599751573056e-05, 0.00027362874243408442, 0.00017654390831012279, 0.00011441454262239859, 0.00026810006238520145, 0.00014612634549848735, 0.00014489480236079544, 0.00032446268596686423, 0.00019028769747819752, 8.2064572779927403e-05, 0.00019918804173357785, 0.0002070840127998963, 0.00018469995120540261, 0.00012672030425164849, 0.00041781002073548734, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 24,127,46,-16,-20,-24,58,11,70,-82,-127,102,-74,31,18,-96,-87,16,-3,29,49,47,73,127,30,-75,-44,-2,-33,0,43,26,16,67,5,68,58,98,6,-36,59,-23,17,-10,-70,-126,50,-63,-63,-6,-16,-82,-36,61,-5,4,-34,-119,-98,-127,-127,32,-127,-31,-42,48,61,12,-47,105,69,-20,-25,-6,48,-25,25,-1,-127,42,-32,-127,70,-74,-106,-46,-49,43,-80,42,-127,54,82,-45,75,16, -51,14,17,38,7,45,-6,-16,70,39,-82,105,-92,-60,-127,69,-127,105,19,41,127,10,121,110,52,-16,1,6,-12,97,5,-111,108,125,37,15,86,127,-13,-88,127,6,105,68,-17,-65,127,-81,-16,-43,-55,-81,20,124,8,-127,37,20,-112,-98,-3,-127,-101,45,-4,89,127,-31,18,127,127,-12,-70,-2,-19,-121,125,-74,65,127,-33,-79,120,-127,-127,-13,67,109,63,122,-123,24,127,-55,127,10, 24,-10,-15,-22,5,-30,11,49,20,59,-114,48,-47,34,12,-127,-38,51,-2,54,36,70,29,25,55,-81,5,39,27,5,2,-76,17,-66,-1,15,38,46,23,14,10,70,17,65,4,-100,30,-44,25,-14,46,11,-22,-36,32,13,103,-113,-66,-100,-94,25,-126,22,34,38,-38,8,-29,9,45,6,-69,-48,-28,28,66,-47,-37,17,-27,9,52,1,-27,-15,-40,8,-89,3,-29,65,22,19,-6,-19, 
  /* [0][1][][] */ 78,43,31,60,12,-57,127,37,-23,-127,-95,127,-17,-127,-24,3,-92,-54,69,27,-91,-6,-114,-25,11,48,-127,127,-93,117,127,125,43,56,30,127,-127,46,-12,-127,50,-127,40,8,-127,-51,-10,-87,-127,-25,-127,0,75,-122,34,0,-110,12,-33,38,17,-99,-23,46,-77,-7,83,-47,-58,9,-27,-127,-65,30,127,-60,127,127,-98,1,127,-96,-50,59,9,-6,-22,89,-11,10,10,46,-53,-127,90,-7, -127,32,-104,127,-65,-127,-91,-127,19,19,-40,99,-105,-73,52,76,-83,-127,127,127,21,-127,-127,79,-127,127,7,90,-84,-55,-76,-2,-127,57,127,23,49,92,127,-70,-51,15,36,-9,-29,-127,-90,-50,7,-127,-91,127,61,75,23,-60,2,14,62,-88,-12,-113,-114,83,52,-127,80,127,1,1,-93,-97,-10,44,-90,-127,116,125,108,-35,-73,22,-127,59,-18,-73,127,127,81,127,-65,-127,-114,-79,57,127, 18,48,80,72,16,-60,17,28,-63,99,-41,73,-31,-27,-65,16,11,-15,53,52,-92,-6,-105,-88,3,33,85,-5,127,64,52,-127,-77,-127,18,98,-78,-10,-23,-89,12,117,38,127,-17,-49,-2,-127,101,-76,-35,10,38,-127,-127,56,127,-13,-127,30,-53,-67,-9,127,127,-31,34,-67,-87,-20,-12,-61,-127,-127,-9,-97,-1,-36,-91,-29,-93,-80,-16,101,-67,-13,-56,-35,-23,-41,14,57,6,117,19,-37, 
  /* [0][2][][] */ 26,-80,104,-6,34,10,50,25,-49,-39,2,-4,3,-14,-55,32,-21,33,-7,30,32,47,30,-18,31,54,-20,-14,-57,-5,-12,0,-4,9,2,42,79,32,-2,-52,-4,18,-16,-39,29,-46,24,-32,-83,54,-8,6,-37,3,-41,25,17,-6,33,58,-54,33,16,-37,-74,76,-58,-10,53,15,25,56,16,-2,25,-52,-79,-27,22,21,-19,-68,17,-70,-51,56,-18,-29,-127,39,-11,53,4,-17,9,-13, -58,-6,127,-27,127,38,-27,-20,-127,10,-18,-32,127,-70,-63,37,4,72,15,-40,32,34,19,-43,56,-38,-5,44,-37,127,0,17,-31,68,30,11,77,3,20,-35,-17,2,-127,17,-28,0,-25,-43,-20,10,-81,75,127,-81,-61,-53,-10,127,19,23,90,-77,86,96,-15,29,1,-3,127,-10,-29,46,-125,-13,-13,-108,-58,-102,-84,-14,-40,-79,-5,-72,-67,127,69,29,88,17,49,33,-20,-23,3,-28, -18,77,-37,-3,15,-21,-18,41,-17,107,6,32,-2,1,-32,54,-30,46,14,66,15,56,-22,4,2,65,-4,6,27,4,1,-83,-14,15,14,12,63,-51,-3,-21,-2,21,31,41,-42,-85,28,-63,44,53,16,-10,37,-44,10,53,7,24,54,34,-46,44,1,-8,53,28,-57,9,52,-15,-28,25,-41,-37,2,-40,-104,-37,-18,1,-40,-77,-4,-38,-59,29,-57,-15,-37,-3,-20,9,-10,-19,-54,-50, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.01254765409976244, 0.0063041923567652702, 0.0044992552138864994, 0.012898032553493977, 0.013891782611608505, 0.011921871453523636, 0.013839310966432095, 0.0099913952872157097, 0.0071752183139324188, 0.0061490400694310665, 0.0039996523410081863, 0.0078998925164341927, 0.007279674056917429, 0.0051293340511620045, 0.0069853928871452808, 0.0076712253503501415, 0.0038249597419053316, 0.0093220258131623268, 0.0041146050207316875, 0.0037722759880125523, 0.0099201742559671402, 0.019095504656434059, 0.010970321483910084, 0.0084949173033237457, 0.022432848811149597, 0.0057469550520181656, 0.011820425279438496, 0.0043151769787073135, 0.0059511130675673485, 0.0045710201375186443, 0.016927521675825119, 0.010172205977141857, 0.0096035609021782875, 0.0064875739626586437, 0.0062970197759568691, 0.012196174822747707, 0.0057496083900332451, 0.010520262643694878, 0.016574153676629066, 0.0051070922054350376, 0.0086504360660910606, 0.010528198443353176, 0.0082747023552656174, 0.0064514423720538616, 0.0054744556546211243, 0.003271555295214057, 0.008553515188395977, 0.0043085855431854725, 0.006928758230060339, 0.0074143591336905956, 0.0060813608579337597, 0.005337100476026535, 0.0076331938616931438, 0.0055269282311201096, 0.011225312016904354, 0.0065506086684763432, 0.0086724972352385521, 0.0079720476642251015, 0.004414739552885294, 0.0045309262350201607, 0.0074032419361174107, 0.0050141098909080029, 0.003288493026047945, 0.003824268002063036, 0.0072646182961761951, 0.012264863587915897, 0.014045387506484985, 0.01296969223767519, 0.0098311398178339005, 0.0085626859217882156, 0.0095877582207322121, 0.0070987041108310223, 0.004579189233481884, 0.010830975137650967, 0.015423913486301899, 0.0027498761191964149, 0.0041691279038786888, 0.0072497613728046417, 0.010430574417114258, 0.0097395079210400581, 0.0075585972517728806, 0.0042021945118904114, 0.011855744756758213, 0.0076492675580084324, 0.004957336001098156, 0.011616198346018791, 0.0063313404098153114, 0.0062779798172414303, 0.014058270491659641, 0.0082447566092014313, 0.0035556815564632416, 0.0086303893476724625, 0.0089725051075220108, 0.0080026518553495407, 0.0054905181750655174, 0.01810280978679657, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 6195, 1752, 2196, -2765, 5547, 11008, 8504, 1038, 213, 9975, 1610, -3256, 5877, 3481, -95, -545, 3310, 4541, 600, -22, 4945, 9532, 9091, -1786, -3636, -342, 11123, -496, 1375, 644, 9413, -2119, 5695, 2876, 5221, -4301, 684, -4630, -442, 1193, 2618, 1478, 1381, -1885, 2692, 3292, 3335, 4590, 6324, 3643, 5748, 1878, -2380, 2544, 1581, 1898, 1498, 2516, 7141, 1722, -615, 5334, 4318, 3613, 4003, 8552, -7238, 2346, 4509, -1423, 5685, 1234, 3396, 3220, 3425, 1893, -1450, 2155, 4873, 2731, 1804, 2424, 6193, 1242, 1970, 4515, 1255, -938, 10112, -644, 940, -953, 11362, 3023, 153, -1016, };
const TfArray<96, float> quant12_scale = { 96, { 0.00012503826292231679, 0.00013205244613345712, 0.00010496425238670781, 9.2891328677069396e-05, 0.00011438661022111773, 7.6591437391471118e-05, 0.00010553238826105371, 0.00026158770197071135, 0.00011897599324584007, 8.1198370025958866e-05, 0.00016401307948399335, 0.00012031320511596277, 0.00011447918222984299, 0.00011998807167401537, 0.00021657430625054985, 0.00013934719027020037, 0.0001339017617283389, 0.00014688730880152434, 0.00013661533012054861, 0.00019161519594490528, 0.00011956810340052471, 9.1431946202646941e-05, 8.7973450717981905e-05, 0.00016069818229880184, 0.00013227076851762831, 0.00019004697969648987, 8.1067730206996202e-05, 0.00010127329005626962, 0.00016495595627930015, 0.00020678600412793458, 9.0606095909606665e-05, 0.00017582462169229984, 0.00011887010623468086, 0.00018568406812846661, 0.00012880671420134604, 0.00014329330588225275, 0.00017214108083862811, 0.00013400304305832833, 0.00014959395048208535, 0.0001602175907464698, 0.00017545130685903132, 0.0001749975053826347, 0.0002092122012982145, 0.00013137140194885433, 0.00015623222861904651, 0.00014259878662414849, 0.00016613079060334712, 0.00013737770495936275, 0.00011074426583945751, 0.00014370407734531909, 0.00013895765005145222, 0.00017832528101280332, 0.00013954285532236099, 0.00016924065130297095, 0.00014285612269304693, 0.00019057207100559026, 0.00015327997971326113, 0.00016153605247382075, 0.00010648479656083509, 0.0001174305725726299, 0.00018069776706397533, 0.00011640688899205998, 0.00010700642451411113, 0.00015341283869929612, 0.00015245072427205741, 9.0975503553636372e-05, 8.8383145339321345e-05, 0.00016217466327361763, 0.00012750714085996151, 0.00017780682537704706, 0.00010812043910846114, 0.00016574488836340606, 0.00013142538955435157, 0.00015165121294558048, 0.00015107622311916202, 0.00010303156886948273, 0.00012597106979228556, 0.000149628656799905, 0.0001093713435693644, 0.00018712390738073736, 0.00019435466674622148, 0.00013660750119015574, 0.00012535668793134391, 0.00015476488624699414, 0.00014719789032824337, 0.00011183194146724418, 0.00013436420704238117, 0.000201097980607301, 8.8495522504672408e-05, 0.0001487801200710237, 0.00018385010480415076, 0.00019188103033229709, 7.5918535003438592e-05, 0.00013564650726038963, 0.00020545702136587352, 0.00014521181583404541, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -29,47,-38,-29,-40,-27,-58,-22,32,-36,60,7,33,-127,-6,-92, 
  /* [1][0][][] */ -15,71,-127,-105,-79,45,-13,63,-49,-15,86,-95,53,120,-10,5, 
  /* [2][0][][] */ -36,0,-103,-27,35,-33,42,-64,-125,105,121,52,75,-22,-71,127, 
  /* [3][0][][] */ -34,-83,29,-23,-114,27,-78,-124,8,6,24,-91,-100,-31,-127,-72, 
  /* [4][0][][] */ 69,-30,9,101,-107,-26,-127,85,36,116,23,52,-32,45,-82,-29, 
  /* [5][0][][] */ -122,44,-11,-27,59,-27,-52,-70,127,-4,12,-24,38,-92,-110,-88, 
  /* [6][0][][] */ -39,-57,-38,47,-53,31,13,6,-21,-34,115,-28,-7,38,-127,-3, 
  /* [7][0][][] */ 0,56,127,-32,51,32,-25,-14,48,58,-87,-26,10,1,61,65, 
  /* [8][0][][] */ -6,102,-14,12,44,101,111,127,-98,-29,-23,-65,77,91,9,-25, 
  /* [9][0][][] */ 7,39,49,27,-127,-43,-92,-67,66,56,110,7,-60,-108,52,-15, 
  /* [10][0][][] */ -35,-93,-10,-97,-61,60,24,80,-14,-58,4,30,-29,24,-127,63, 
  /* [11][0][][] */ 102,-50,-1,79,-102,-48,64,-42,119,123,-41,74,-3,-121,2,127, 
  /* [12][0][][] */ -21,-55,94,-15,24,-14,42,39,90,-4,104,60,-30,15,-127,1, 
  /* [13][0][][] */ -25,-56,46,50,14,-14,92,41,-127,-37,-4,13,-44,127,93,-52, 
  /* [14][0][][] */ 114,-71,127,36,19,49,73,68,74,69,28,9,53,-4,57,-45, 
  /* [15][0][][] */ -15,124,10,-88,118,118,-82,127,-62,-33,-46,10,-48,120,-64,-75, 
  /* [16][0][][] */ -57,51,122,-5,45,82,17,-12,-11,13,-35,51,102,63,116,127, 
  /* [17][0][][] */ 12,73,45,-127,10,-26,8,-72,-71,-13,-1,67,-12,-43,44,-13, 
  /* [18][0][][] */ -38,19,-83,-76,72,91,-1,-65,41,45,127,37,20,78,-23,-9, 
  /* [19][0][][] */ 57,127,87,78,8,-4,16,20,-39,90,29,81,76,88,-18,16, 
  /* [20][0][][] */ 91,-69,23,111,-77,-6,-44,95,-54,-22,-127,-49,89,-40,18,5, 
  /* [21][0][][] */ -51,-30,-12,127,-66,18,-120,10,-28,48,-7,2,-4,85,-31,-31, 
  /* [22][0][][] */ -7,-39,-5,-90,127,-36,-77,40,54,109,-3,60,-22,40,-56,-13, 
  /* [23][0][][] */ -75,3,-12,15,1,51,127,92,-41,113,-40,-43,-3,18,-39,-29, 
  /* [24][0][][] */ -5,-108,95,-55,122,39,127,-99,113,30,54,52,-57,-1,-71,-24, 
  /* [25][0][][] */ 85,-20,27,0,21,-21,-62,120,67,14,-55,7,119,-25,127,45, 
  /* [26][0][][] */ 69,18,127,35,31,-50,-46,-8,39,51,-1,112,18,-118,51,-31, 
  /* [27][0][][] */ -16,51,-64,34,-51,114,37,-50,4,-59,87,6,45,-13,127,86, 
  /* [28][0][][] */ -73,19,-98,-60,11,-105,-48,-40,-59,127,-35,2,-52,16,-74,54, 
  /* [29][0][][] */ 58,72,-63,64,-4,66,-48,-19,34,80,-12,35,-127,53,3,25, 
  /* [30][0][][] */ -36,64,-100,-19,-2,-45,72,24,-32,42,-85,-62,38,107,-30,127, 
  /* [31][0][][] */ 22,-107,94,60,27,-48,-38,60,-2,-12,38,-19,-18,37,36,127, 
  /* [32][0][][] */ -84,28,16,92,-92,0,10,78,66,-86,-25,-127,-32,29,14,46, 
  /* [33][0][][] */ -81,-14,64,74,3,17,-46,-11,-26,-57,0,-37,-13,29,8,127, 
  /* [34][0][][] */ -26,6,-102,-113,83,-14,-33,85,3,3,17,2,-58,-34,-1,127, 
  /* [35][0][][] */ 68,1,10,-36,-4,33,-58,-59,-47,-127,-50,22,17,-22,36,-47, 
  /* [36][0][][] */ -13,20,-127,-20,35,93,10,53,-18,3,36,41,-8,-8,-46,57, 
  /* [37][0][][] */ 79,34,10,-36,7,-63,33,14,-114,78,-43,-11,54,49,127,-5, 
  /* [38][0][][] */ -8,127,51,-73,37,46,83,-88,16,-27,-98,85,-29,-89,-88,-20, 
  /* [39][0][][] */ 74,-1,-51,-50,-68,-38,-13,-36,42,-10,-25,-58,35,-6,-127,-56, 
  /* [40][0][][] */ -53,9,-59,-114,-14,-76,-15,-106,-14,-23,12,-51,-8,28,11,127, 
  /* [41][0][][] */ -5,-57,14,127,-36,17,-94,-28,28,-49,46,-52,-77,11,-18,-13, 
  /* [42][0][][] */ -41,83,-48,-127,-28,6,-16,-75,68,34,-85,-2,110,32,-26,26, 
  /* [43][0][][] */ 29,66,40,51,127,85,44,7,43,58,-12,-127,-107,20,-2,-63, 
  /* [44][0][][] */ 73,36,-39,7,-10,29,35,28,-12,-15,48,13,127,54,-28,9, 
  /* [45][0][][] */ -38,-89,-113,2,-33,-121,12,31,1,7,45,41,-69,127,28,20, 
  /* [46][0][][] */ -1,-78,28,35,-35,5,-127,10,-13,-2,14,-37,64,102,83,70, 
  /* [47][0][][] */ -14,-58,34,78,-26,9,34,19,-13,-44,-127,-21,50,-10,-41,-23, 
  /* [48][0][][] */ -94,77,-31,-36,7,-9,-74,-107,22,-41,31,-41,17,-127,-112,27, 
  /* [49][0][][] */ -75,8,46,-70,17,5,116,127,-55,-31,17,40,-24,43,-52,14, 
  /* [50][0][][] */ 40,49,-94,-1,59,-91,-15,-23,-60,33,-8,10,37,-85,-127,-25, 
  /* [51][0][][] */ -32,27,-8,114,-31,18,-38,-52,-26,-50,-18,-54,-29,33,15,127, 
  /* [52][0][][] */ -113,-14,23,5,39,8,31,15,8,-36,-61,-14,-110,-31,-127,-26, 
  /* [53][0][][] */ -72,-74,-34,-105,-49,-25,1,64,63,-38,-32,49,-50,-13,53,127, 
  /* [54][0][][] */ 7,-24,2,-9,-71,55,39,-15,-71,-122,59,17,-48,-35,-127,38, 
  /* [55][0][][] */ 1,-36,-16,45,60,-4,78,88,-55,-57,-127,-25,71,-17,-9,12, 
  /* [56][0][][] */ 60,-33,-13,-14,-127,10,-123,10,27,6,-59,-20,89,-40,41,1, 
  /* [57][0][][] */ -64,14,-1,-39,88,33,62,31,8,67,22,26,-25,64,-127,8, 
  /* [58][0][][] */ 44,13,9,-2,4,7,-51,-31,22,-127,-69,-15,-82,-33,1,22, 
  /* [59][0][][] */ -76,-39,41,-32,4,33,-127,-65,61,124,-116,1,-7,-10,-6,-32, 
  /* [60][0][][] */ -5,-114,-43,12,-127,-90,73,36,-4,112,33,93,15,-47,41,94, 
  /* [61][0][][] */ 41,32,-55,13,-78,-10,-117,-69,-9,26,24,101,61,-49,127,43, 
  /* [62][0][][] */ 17,-3,12,-33,-5,46,57,105,-45,112,42,73,49,56,64,127, 
  /* [63][0][][] */ 4,-113,-22,-10,-46,19,57,-15,-11,14,6,-8,-38,125,127,33, 
  /* [64][0][][] */ -72,-78,-120,-26,-22,-4,-29,-36,30,-7,-10,-12,48,-63,-127,124, 
  /* [65][0][][] */ -22,26,41,52,51,-63,27,59,-66,16,-98,-39,29,127,-21,-7, 
  /* [66][0][][] */ -53,-121,11,-124,-49,-127,52,-81,-26,-26,46,115,-54,-76,-84,95, 
  /* [67][0][][] */ -20,-48,-59,-39,-57,127,2,-73,-105,-60,-38,-109,20,-22,-37,48, 
  /* [68][0][][] */ 76,48,-5,-41,-32,-7,-87,-50,-127,-109,-59,9,60,-37,27,-90, 
  /* [69][0][][] */ 73,10,15,-22,-78,11,-22,29,-5,127,25,4,42,41,114,-10, 
  /* [70][0][][] */ 31,-44,20,48,-78,3,18,-127,106,99,53,102,94,-62,-52,32, 
  /* [71][0][][] */ 127,-36,90,80,-81,-5,27,-34,68,-61,7,21,47,-25,59,11, 
  /* [72][0][][] */ 12,-40,62,98,-4,-12,-127,74,80,13,7,-11,-46,-49,-47,43, 
  /* [73][0][][] */ 45,10,58,-127,93,-47,-24,8,-20,70,-6,27,17,-89,42,-38, 
  /* [74][0][][] */ 76,7,22,53,-127,-20,-9,-13,-45,-39,19,-26,48,-65,-28,-14, 
  /* [75][0][][] */ 45,127,-120,-4,89,46,-1,-8,-40,-31,65,48,-85,42,58,99, 
  /* [76][0][][] */ -39,-18,1,-52,-50,15,103,-16,-44,-2,109,51,-29,-127,-18,59, 
  /* [77][0][][] */ -94,114,50,30,-48,-87,30,127,114,4,1,81,-42,14,-40,93, 
  /* [78][0][][] */ 113,46,-97,42,-98,33,-127,-18,-38,27,-98,-3,9,-73,72,67, 
  /* [79][0][][] */ -14,7,127,63,-29,-22,-31,-36,-57,-26,28,19,-37,65,-57,62, 
  /* [80][0][][] */ 107,60,41,-79,-41,31,116,8,33,-9,-40,20,127,-68,20,-15, 
  /* [81][0][][] */ 52,-76,38,-76,64,44,-11,127,121,52,-37,-56,-37,51,-44,-104, 
  /* [82][0][][] */ 48,20,53,14,107,-127,-1,53,-27,45,-4,41,-47,-36,-8,-56, 
  /* [83][0][][] */ -25,50,16,-19,85,40,127,48,-3,43,-6,-25,-50,54,-35,-98, 
  /* [84][0][][] */ 24,6,-4,119,-19,1,-45,10,-81,74,-62,-14,-81,127,30,-92, 
  /* [85][0][][] */ -104,80,-39,-47,-15,-54,-126,-127,-19,100,-21,-77,-54,-70,-117,-29, 
  /* [86][0][][] */ -23,26,99,96,29,-65,33,-19,7,7,-38,-34,22,66,-127,-40, 
  /* [87][0][][] */ -19,59,127,-40,-100,-21,27,-8,35,-31,16,24,-33,1,-34,1, 
  /* [88][0][][] */ 17,-29,-116,-25,-5,53,-26,4,-28,-127,-69,-82,34,-51,-28,57, 
  /* [89][0][][] */ 61,-9,34,-113,-12,-70,-76,55,127,-4,14,-74,-5,-33,87,-120, 
  /* [90][0][][] */ -23,74,10,-8,-30,25,51,123,47,-41,5,127,41,-17,-69,113, 
  /* [91][0][][] */ -34,25,-47,3,75,52,-2,-110,-82,-1,39,46,-73,-127,-55,38, 
  /* [92][0][][] */ -16,62,18,-9,-124,-49,-74,37,-20,58,127,126,15,-35,39,50, 
  /* [93][0][][] */ 82,3,81,57,-127,-50,42,50,3,-71,-7,-35,42,-49,-29,-24, 
  /* [94][0][][] */ -24,-127,44,-100,19,41,-20,-13,81,-9,5,63,22,48,-47,27, 
  /* [95][0][][] */ -42,-81,-41,-68,119,86,-20,96,110,32,-51,46,-5,96,-127,75, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0017655665287747979, 0.0018646082608029246, 0.0014821172226220369, 0.0013116450281813741, 0.0016151628224179149, 0.001081487163901329, 0.001490139402449131, 0.0036936730612069368, 0.0016799658769741654, 0.0011465379502624273, 0.0023158988915383816, 0.0016988476272672415, 0.0016164700500667095, 0.0016942566726356745, 0.0030580745078623295, 0.0019676114898175001, 0.0018907207995653152, 0.0020740795880556107, 0.0019290370400995016, 0.0027056466788053513, 0.0016883265925571322, 0.0012910382356494665, 0.0012422035215422511, 0.0022690920159220695, 0.00186769082210958, 0.0026835030876100063, 0.0011446933494880795, 0.0014300000621005893, 0.0023292126134037971, 0.0029198615811765194, 0.0012793770292773843, 0.0024826803710311651, 0.0016784707549959421, 0.0026218979619443417, 0.0018187777604907751, 0.0020233313553035259, 0.0024306681007146835, 0.001892151078209281, 0.0021122978068888187, 0.0022623059339821339, 0.0024774090852588415, 0.0024710013531148434, 0.0029541200492531061, 0.0018549916567280889, 0.0022060316987335682, 0.0020135247614234686, 0.0023458015639334917, 0.0019398018484935164, 0.0015637321630492806, 0.0020291316322982311, 0.0019621110986918211, 0.0025179903022944927, 0.0019703742582350969, 0.0023897134233266115, 0.0020171583164483309, 0.0026909175794571638, 0.0021643454674631357, 0.0022809228394180536, 0.0015035875840112567, 0.0016581442905589938, 0.0025514902081340551, 0.0016436895821243525, 0.001510953065007925, 0.0021662213839590549, 0.002152636181563139, 0.0012845931341871619, 0.001247988548129797, 0.0022899401374161243, 0.0018004275625571609, 0.0025106696411967278, 0.0015266832197085023, 0.0023403523955494165, 0.0018557540606707335, 0.0021413469221442938, 0.0021332278847694397, 0.0014548272592946887, 0.0017787377582862973, 0.0021127879153937101, 0.0015443462179973722, 0.0026422287337481976, 0.0027443284634500742, 0.001928926445543766, 0.0017700627213343978, 0.0021853125654160976, 0.0020784649532288313, 0.0015790903707966208, 0.0018972507677972317, 0.0028395454864948988, 0.0012495752889662981, 0.002100806450471282, 0.0025960018392652273, 0.0027094003744423389, 0.0010719855781644583, 0.0019153570756316185, 0.0029010961297899485, 0.0020504212006926537, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -27521, -4856, -767, -19066, 7765, -16470, 23597, -9551, 12880, -11230, 16628, 14192, 372, -30152, -2093, 11159, };
const TfArray<16, float> quant14_scale = { 16, { 6.7148517700843513e-05, 4.699017881648615e-05, 4.201390765956603e-05, 6.5253312641289085e-05, 7.754909893264994e-05, 0.00015667181287426502, 7.4930219852831215e-05, 6.5720698330551386e-05, 0.00012396539386827499, 0.0001022497090161778, 7.4217132350895554e-05, 0.00010790945816552266, 5.7026449212571606e-05, 7.3725488618947566e-05, 5.6538719945820048e-05, 6.8235960497986525e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -4,22,33,33,0,-79,-4,13,-50,-83,2,50,65,-80,67,23,-90,-42,43,0,85,52,-74,29,3,67,127,59,-23,85,78,-25,4,-5,-15,-26,49,30,-27,10,94,21,9,-57,16,-1,-1,-58,52,-34,79,-30,-56,21,46,6,1,-64,1,31,-18,68,-48,-21,2,-24,81,25,-54,-33,31,9,8,30,10,39,64,-30,53,35,5,33,15,-2,-56,13,-10,89,-1,7,-101,-44,12,35,109,61, 
  /* [1][0][][] */ 45,38,-32,15,14,-28,118,-59,-100,-25,-44,-58,-3,-27,20,-67,23,-11,-20,-39,18,-97,74,-55,-24,42,-1,105,-65,0,-17,34,-63,34,-7,29,5,37,-51,76,9,45,10,-78,76,-63,12,45,-89,-17,23,-86,-65,26,75,39,85,12,-104,25,-42,-23,-17,-27,42,-2,115,8,-80,-127,-2,7,27,70,-20,26,-84,-8,104,-55,20,-4,48,-75,-17,-82,-12,19,-19,-57,30,-21,75,-64,-8,9, 
  /* [2][0][][] */ -23,-35,10,-34,77,33,-42,67,-47,62,32,10,28,-37,45,53,26,-48,-127,8,-20,-35,2,43,8,-53,-18,-1,-43,4,13,70,-4,-22,10,9,-54,48,-28,-13,100,3,-7,54,30,73,-6,-8,-88,19,5,-4,-9,65,18,-81,33,34,39,63,-24,-7,-10,39,52,7,-54,-2,-25,6,-32,-45,46,49,44,96,-27,-15,-19,-16,65,23,61,-17,-9,-26,-22,-57,-53,-44,-35,92,3,11,65,0, 
  /* [3][0][][] */ 14,-27,-42,-109,-17,-28,105,-20,42,85,-44,12,-5,-22,-18,56,19,40,-30,31,-38,20,26,9,-21,44,53,-21,-27,6,-59,45,10,10,43,-30,11,-39,-31,68,18,-9,-22,8,61,-33,-23,37,41,-6,35,-27,98,47,36,5,1,-12,-7,-37,-30,55,60,-7,-36,3,106,-26,-32,20,-46,34,6,-62,7,-41,35,-43,127,14,30,-34,-25,-33,-31,-24,66,84,-70,24,-56,14,10,-44,-35,43, 
  /* [4][0][][] */ -25,71,22,15,-26,29,-21,-53,15,-24,21,-3,20,38,-28,23,-8,-29,-28,-71,39,-43,-50,4,-40,-28,-10,22,-34,127,-70,-19,4,-36,10,-29,65,35,-43,-17,19,6,29,-54,-34,8,43,-4,17,-4,-56,2,-79,25,46,32,9,74,-25,17,-34,-74,-10,-16,70,16,-56,-6,-13,12,5,-61,-26,54,61,68,-16,14,-32,22,17,68,30,-39,48,-49,-8,-65,-44,-56,-27,-7,20,11,36,-54, 
  /* [5][0][][] */ 0,-22,59,-4,-7,-18,-6,-2,19,18,-12,4,-21,-24,17,-18,3,2,-40,-23,-17,35,-23,30,29,-49,63,-17,-13,48,22,66,-3,-78,-4,9,-33,-25,-44,19,-42,5,-34,-10,8,35,-75,13,-2,7,52,-27,1,-57,24,-5,-14,-43,4,-28,42,21,32,26,-39,-12,121,-16,-36,-39,16,7,8,22,26,-4,-3,-5,127,29,-19,-15,-24,17,34,70,6,78,8,-31,-11,5,6,7,-21,5, 
  /* [6][0][][] */ 20,-37,72,17,-46,91,-53,-68,-14,-39,-58,77,41,32,-62,70,9,24,0,-17,-91,-14,-58,-50,8,-87,-1,29,-127,47,-30,0,72,60,-23,-14,7,-16,23,-18,-50,49,36,-31,-11,65,-83,-29,35,-5,-76,-107,42,17,-29,-63,-2,-18,34,19,4,-30,38,10,29,-73,-80,-70,-81,-7,-29,-62,11,-62,16,-66,96,22,-94,26,-51,74,18,-101,59,-24,-3,2,-66,37,-89,38,21,-72,60,-60, 
  /* [7][0][][] */ 1,-22,-55,78,-8,31,36,21,-98,-12,82,90,-8,-34,9,-52,-24,-29,10,-1,-66,-48,-23,-75,68,44,-10,45,-9,25,17,23,-54,-127,37,109,-24,-3,-42,2,-25,5,-29,-43,21,50,64,58,-13,23,-44,16,46,-27,42,-54,-8,33,-86,-9,37,-17,8,-27,78,-42,113,-32,-67,18,65,-1,-15,-29,-50,-5,17,-48,105,-53,5,-24,-68,-44,73,-6,-77,40,-38,9,-13,2,65,-14,92,8, 
  /* [8][0][][] */ -5,-72,5,5,-34,2,20,-8,-10,-5,42,54,6,16,-34,-17,55,-16,12,-11,-5,-60,-19,-31,-17,-27,37,9,-38,37,8,-21,-17,3,6,9,-38,-23,16,-15,4,32,32,-27,13,-7,10,-8,32,-17,51,12,-10,8,-45,10,-27,98,-37,-15,-14,-65,-47,-12,-84,-43,-12,8,8,11,27,-13,-8,-127,26,-108,0,25,-42,17,-36,-10,-11,39,42,-48,-45,41,-18,78,-7,-16,-38,8,-5,-44, 
  /* [9][0][][] */ -32,-38,-32,20,23,36,5,29,-26,-16,36,74,-23,38,35,-43,-16,31,0,-41,6,27,0,21,-32,21,1,24,32,-1,48,-17,-8,-21,20,42,-35,0,21,1,-4,-28,25,1,14,41,-5,33,-48,18,-1,42,127,12,-18,4,5,3,27,5,-52,-16,77,-16,3,8,47,13,49,10,-20,9,-9,-124,-15,-114,-22,-31,51,3,10,23,1,-27,41,10,-53,-1,-23,106,54,21,73,52,-12,24, 
  /* [10][0][][] */ 29,34,32,14,-6,20,-36,-18,51,5,-52,8,29,11,-1,-65,-9,-10,27,-14,29,1,-34,-21,-2,-4,-94,56,-33,35,14,23,18,3,-33,13,-8,1,-15,-17,27,3,62,-32,-22,5,31,14,11,-1,14,-37,-29,-26,-10,23,13,3,-10,-6,-18,-49,-1,1,6,-32,-78,-22,-55,-48,47,-23,-14,35,41,10,30,-33,-100,-8,-36,21,-4,-10,19,-6,-82,-127,-4,37,7,9,38,-48,36,16, 
  /* [11][0][][] */ 4,-25,15,11,-28,19,4,22,39,-1,-28,-37,32,6,8,-15,-7,40,24,-58,-1,35,10,-2,18,18,56,-8,8,-52,-3,27,20,67,-81,6,12,10,58,-8,-41,41,7,11,-23,10,7,-17,27,-16,-26,-32,12,-5,-57,49,-14,-5,2,-7,19,-6,1,-58,10,-53,-127,-56,-8,-34,-66,8,45,17,5,7,17,24,-115,-40,-35,-3,-26,-13,-5,-7,34,44,6,-26,7,-1,-27,7,70,12, 
  /* [12][0][][] */ 7,16,-16,-5,40,-19,14,65,42,-20,28,-32,9,-7,5,6,11,-48,-37,-5,10,90,-13,95,-59,-32,-127,24,69,-46,61,20,-32,-83,53,3,55,-6,9,-5,-19,-71,6,31,34,-18,41,-29,-85,13,-67,92,77,-4,25,-101,23,1,-59,-21,19,44,94,2,-35,-35,23,31,107,15,3,16,24,-21,-34,-14,-63,-39,22,-91,8,-46,21,-40,-1,-8,20,-121,-6,46,-55,-4,-12,78,36,31, 
  /* [13][0][][] */ 14,13,-94,51,62,56,0,30,51,41,-44,53,-43,8,78,-58,-5,22,54,20,-34,-67,-26,11,29,59,-33,44,32,44,53,-8,-32,65,-11,59,24,-67,-31,-52,-23,-12,4,11,24,29,-30,37,-59,29,2,29,-6,-57,52,12,-3,-46,-39,-21,13,-2,3,-42,-5,88,122,17,52,34,-57,3,40,55,-89,54,-2,-60,127,-48,-11,-42,16,2,17,25,-20,-41,16,-14,-10,33,27,20,81,68, 
  /* [14][0][][] */ -23,52,2,18,-34,-42,31,76,-56,-26,67,48,-73,-7,63,-8,-73,36,-65,43,-18,36,-82,11,-43,-14,-40,-98,10,10,45,94,-45,49,18,-5,-2,-50,6,-41,36,-36,41,-39,11,44,-66,27,-15,-22,78,15,14,15,-19,-1,-45,21,-14,42,36,84,-3,40,4,-33,-13,-59,9,84,59,29,-52,39,9,28,44,-13,13,27,-30,111,-15,-118,67,18,10,24,-127,-21,-28,-18,-29,31,29,45, 
  /* [15][0][][] */ 80,-28,34,43,54,18,-29,-1,4,26,-56,-71,62,77,1,-26,7,15,-71,30,-8,-50,1,4,45,-14,73,32,38,-50,-32,60,38,31,-8,-67,42,47,71,32,70,37,-14,22,-54,-127,47,-43,-42,-35,-34,20,-2,-70,-44,53,-1,5,-14,28,10,-79,-44,45,45,31,-75,30,11,-50,0,-12,10,-110,-39,-101,-45,8,-119,16,49,-38,51,24,-43,-26,-11,-32,70,93,15,-71,-32,-51,50,-45, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.002853811951354146, 0.001997082494199276, 0.0017855910118669271, 0.0027732658199965954, 0.0032958365045487881, 0.006658551748842001, 0.0031845343764871359, 0.0027931297663599253, 0.0052685290575027466, 0.0043456126004457474, 0.0031542279757559299, 0.0045861518010497093, 0.0024236240424215794, 0.0031333332881331444, 0.0024028955958783627, 0.0029000281356275082, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 8877, -1952, -10171, 13359, -3785, -7012, -956, -1198, -295, -7174, 2799, -4113, 12287, -8786, 170, -7913, 2088, 3430, -12792, -2327, -2112, 1943, -6865, -1362, 194, 7091, -6850, -7114, -3697, -2395, 1340, -2404, 15268, -390, 1248, 2270, -103, 8594, 1553, 8969, -613, 7964, -3373, 2743, 7014, 5683, 2597, 5415, -7175, 2075, -6136, -1912, 2031, -3653, 1961, 1045, 3809, 2446, -1481, 5542, 860, -412, 2341, 8147, 13316, -4164, 12312, 15726, 2135, -1969, 9370, 728, 670, 520, -4285, -1006, 11335, 6460, 10878, 14696, 9596, -280, 7563, 6310, -605, -2263, 14421, -8948, 9885, 511, -8255, 1852, 3929, 3332, 27476, -2493, };
const TfArray<96, float> quant16_scale = { 96, { 0.00011096295929746702, 0.00026599119883030653, 8.5196421423461288e-05, 0.00011996521789114922, 0.00015771531616337597, 0.00027993318508379161, 9.6640149422455579e-05, 0.00022291988716460764, 0.00037860730662941933, 0.00015358590462710708, 0.00031115461024455726, 0.00020695844432339072, 0.00010179149103350937, 5.9021156630478799e-05, 0.00020721416512969881, 0.00014879113587085158, 0.00035490174195729196, 0.00028325404855422676, 0.00010232660133624449, 0.0003977781452704221, 0.00027980896993540227, 0.00024854674120433629, 9.1703695943579078e-05, 0.00026219850406050682, 0.0019682608544826508, 0.00015082029858604074, 0.0002635334967635572, 0.00013514234160538763, 0.00037931432598270476, 0.00014665875642094761, 0.00017713512352202088, 0.00021755894704256207, 7.9832301707938313e-05, 0.00033941378933377564, 0.000164393539307639, 0.00016576828784309328, 0.0002775146858766675, 8.2672522694338113e-05, 0.00034538350882939994, 9.1434500063769519e-05, 0.00047607155283913016, 0.00014610095240641385, 0.00018829679174814373, 0.00019088179396931082, 0.00011484666174510494, 0.00023705350758973509, 0.00029558694222941995, 0.00017316262528765947, 0.00014874315820634365, 0.00014870222366880625, 0.00021105857740622014, 0.00018545251805335283, 0.00014701444888487458, 0.00023053413315210491, 0.00030999231967143714, 0.00025417708093300462, 0.0001186638546641916, 0.00045734902960248291, 0.00024987914366647601, 0.0001611673942534253, 0.00027794443303719163, 0.00028632002067752182, 0.00016883559874258935, 8.0039375461637974e-05, 0.00022377306595444679, 0.00031771825160831213, 0.00015764619456604123, 8.3744438597932458e-05, 0.00027104408945888281, 0.00045174505794420838, 0.00011757524771383032, 0.00023633042292203754, 0.00059884804068133235, 0.00022260341211222112, 0.00014023898984305561, 0.00025533721782267094, 9.3442249635700136e-05, 0.00017043481057044119, 0.0001478820777265355, 0.00012581357441376895, 8.3562357758637518e-05, 0.00018574339628685266, 9.8647607956081629e-05, 0.00036965854815207422, 7.8468787251040339e-05, 0.0002556521212682128, 8.1959682574961334e-05, 0.00017399959324393421, 0.00013343634782359004, 0.00024291084264405072, 0.00010879385081352666, 0.00018937441927846521, 0.00018498902500141412, 0.00017663529433775693, 7.2697272116784006e-05, 0.00032479583751410246, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -27,-8,75,-99,127,21,9,-26,7,13,-32,-49,-84,81,-27,21,-32,-21,65,-18,3,48,63,58,-18,19,-38,-3,15,-49,71,52,-127,7,-27,-45,-20,-38,-27,38,-3,-8,57,-16,-67,16,-70,-26,4,-9,6,57,-92,-10,19,-4,-32,-9,13,4,-6,-19,-23,-107,-52,-6,-57,31,-23,37,-63,6,25,-18,-1,-7,3,10,127,-3,-123,37,-127,25,-71,-6,-12,57,-22,-2,11,-44,-12,69,-63,16, -14,21,23,-109,-9,24,80,-44,3,-17,-52,2,-71,19,-104,127,-26,47,127,-26,1,127,95,127,14,40,40,96,127,22,127,-29,-120,-19,-100,-43,-30,-117,127,-75,-23,-127,14,-23,42,-55,-18,-22,65,-24,29,127,-104,58,-103,1,-83,-15,-1,19,-25,-127,-127,-127,-73,3,-14,-69,-12,23,-76,105,-127,-13,3,-30,-70,-47,-8,-36,-51,11,-6,-70,127,76,-92,57,-106,7,22,-11,-21,127,-87,-82, 6,10,64,-21,78,30,103,-34,-14,28,-23,6,-120,76,-19,3,-28,-6,11,-23,-8,-2,21,28,-18,-15,33,2,25,46,14,42,-84,0,-61,53,-8,-127,-31,37,-10,-81,34,-4,-57,-52,-69,-31,39,-22,2,44,2,-3,-6,-13,-4,-10,3,-48,-13,-23,-85,-101,-68,-27,127,-30,-28,33,-16,7,3,10,11,10,104,31,-64,-38,-67,-22,-55,-2,21,-23,-33,-14,-127,-35,-12,41,-12,65,-16,2, 
  /* [0][1][][] */ -97,8,123,-86,72,127,-31,-7,5,-35,-42,-16,-54,75,10,94,-30,15,126,34,37,-4,127,-7,13,31,44,54,5,-22,-46,-20,-82,-10,80,-15,1,-60,-45,-127,-10,-11,127,-5,-127,127,-37,-102,88,33,42,-40,-127,49,49,-22,-3,-23,64,-12,18,-5,52,3,-25,38,-34,-72,-22,-12,-127,0,23,127,27,-48,-67,-18,-72,-53,-43,1,-60,-27,14,11,-127,95,-3,127,127,-95,127,-29,-127,-5, 59,127,127,127,-126,-117,127,-25,127,126,-85,-27,-59,127,-13,123,127,-127,105,127,127,-40,92,-71,-127,-127,127,127,-120,127,-88,127,-27,127,127,-118,127,58,9,-69,127,-21,-121,-91,121,-36,127,105,127,-127,127,-86,95,127,-127,127,-127,127,-127,127,-117,92,71,-69,127,127,-29,127,-127,-127,-10,-127,-6,104,127,60,78,-127,100,-127,90,127,84,127,98,77,-78,127,-26,51,-44,-27,-123,-93,-94,-20, -127,-10,122,-97,54,78,-2,6,-29,-20,-4,127,-127,32,11,58,-37,39,32,30,11,-15,-6,5,8,-6,29,6,-1,43,41,-22,-48,-30,51,127,12,-30,-50,-60,-33,-48,38,-26,-112,-102,-12,-127,46,26,-3,-23,97,-15,71,-35,46,-27,56,-71,3,-20,-81,-97,-113,1,-50,-110,-52,5,-70,-14,20,-89,36,127,-127,-31,-68,-26,-87,-34,-80,-69,25,49,-109,63,-62,-87,120,127,-65,-20,-67,0, 
  /* [0][2][][] */ -36,-30,-19,7,39,33,-9,24,2,44,16,4,38,50,-14,-35,-11,-14,-46,-25,-29,-52,33,9,-13,7,-19,55,14,-34,-49,19,-15,7,-33,-45,0,-112,-29,-9,-28,-26,67,24,-10,-12,-17,-23,-3,-21,0,2,-36,-41,37,9,-6,-26,32,-50,-6,28,1,-15,-33,0,100,-5,38,51,-41,-19,4,-5,-3,-20,-85,45,-41,-75,-32,-4,-104,-7,7,-14,13,-51,-48,-16,18,-62,-41,5,-52,9, -59,-49,-26,-95,-21,28,71,127,-47,127,127,-13,-85,58,127,16,-20,-48,25,-33,-36,-82,25,-14,4,-26,-8,-2,14,-29,-120,-52,-47,-20,-86,-33,-81,-49,25,-74,-17,-91,-10,127,5,-37,-15,-7,11,-29,14,-9,62,29,-36,-38,-36,-45,53,-99,127,61,95,-33,-114,-32,-26,-105,118,27,-31,-10,-15,-26,-2,-9,-46,-58,-3,-4,-127,-30,-53,-84,32,-127,-12,-41,47,0,81,-19,-27,-125,-98,127, -3,16,-42,-42,37,31,-31,14,-15,2,12,59,20,53,-12,-30,-15,-7,-23,-8,-12,-39,-27,-30,-24,-12,-36,-3,26,42,23,22,17,9,-29,-13,-17,-30,-27,12,-27,-9,44,20,-13,-26,-16,-15,-14,-32,13,-10,15,-37,36,5,22,-7,17,-52,-18,29,-2,-51,-12,-10,-35,-27,23,53,-27,-34,-60,-38,-2,6,-50,-8,106,-50,-99,-7,-26,-20,24,-2,17,62,-66,14,-23,10,-31,-5,-59,-8, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0047159255482256413, 0.011304626241326332, 0.0036208478268235922, 0.0050985217094421387, 0.0067029008641839027, 0.011897159740328789, 0.0041072061285376549, 0.009474094957113266, 0.016090810298919678, 0.0065274010412395, 0.013224070891737938, 0.0087957335636019707, 0.0043261381797492504, 0.0025083990767598152, 0.0088066020980477333, 0.0063236230053007603, 0.015083324164152145, 0.012038297019898891, 0.0043488806113600731, 0.016905570402741432, 0.011891881003975868, 0.01056323666125536, 0.0038974068593233824, 0.011143436655402184, 0.083651080727577209, 0.006409862544387579, 0.011200172826647758, 0.0057435496710240841, 0.016120858490467072, 0.0062329969368875027, 0.0075282426550984383, 0.0092462552711367607, 0.003392872866243124, 0.014425085857510567, 0.0069867251440882683, 0.0070451521314680576, 0.011794374324381351, 0.0035135820508003235, 0.014678798615932465, 0.0038859660271555185, 0.020233040675520897, 0.0062092901207506657, 0.0080026136711239815, 0.0081124762073159218, 0.0048809829168021679, 0.01007477380335331, 0.012562444433569908, 0.0073594115674495697, 0.0063215838745236397, 0.0063198446296155453, 0.0089699896052479744, 0.0078817317262291908, 0.0062481136992573738, 0.0097977006807923317, 0.013174673542380333, 0.010802526026964188, 0.0050432137213647366, 0.019437333568930626, 0.010619863867759705, 0.0068496139720082283, 0.011812637560069561, 0.012168600223958492, 0.0071755130775272846, 0.003401673398911953, 0.009510355070233345, 0.013503025285899639, 0.0066999630071222782, 0.0035591386258602142, 0.011519373394548893, 0.01919916458427906, 0.0049969479441642761, 0.010044042952358723, 0.025451041758060455, 0.0094606447964906693, 0.0059601566754281521, 0.01085183210670948, 0.0039712954312562943, 0.0072434796020388603, 0.0062849884852766991, 0.005347076803445816, 0.0035514000337570906, 0.0078940941020846367, 0.0041925231926143169, 0.015710487961769104, 0.0033349234145134687, 0.010865215212106705, 0.0034832865931093693, 0.0073949825018644333, 0.0056710448116064072, 0.010323710739612579, 0.0046237385831773281, 0.0080484123900532722, 0.0078620333224534988, 0.0075070001184940338, 0.0030896340031176805, 0.013803822919726372, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1131, 6157, -408, 2482, 3781, 11261, -120, 2010, 9232, -290, 14808, 1487, 2008, 966, 5854, 519, 4895, 7917, 299, 13050, 669, 8612, -1026, 3759, -9171, 448, 3295, 1206, 4707, 1560, 3035, 4876, 3253, 11738, 5516, 3255, 5352, 1414, 4043, 2272, 9036, 1599, 2037, 1499, 3960, 11757, 6299, 8259, 598, -399, 2863, 3731, 2910, -2802, 8585, 16, 4035, 8325, 711, 2686, 2061, 11223, 4778, -592, 16657, 6527, 1810, 3445, 12371, 3611, 2386, 1470, -3619, 4611, 2764, 2160, 150, 13692, 3306, 6263, 1604, 397, 2663, 14053, 776, 9383, 5021, 1940, -913, 1440, 1072, 10625, 2561, 2268, 4511, 4324, };
const TfArray<96, float> quant18_scale = { 96, { 0.00024818503879942, 0.00011348526459187269, 0.00020466500427573919, 0.00019493479339871556, 0.00015823825378902256, 7.7254553616512567e-05, 0.0002146221959264949, 0.00015632247959729284, 9.1223460913170129e-05, 0.00025357978302054107, 6.2299157434608787e-05, 0.00022098653425928205, 0.00018272010493092239, 0.00023526375298388302, 9.5836599939502776e-05, 0.00012738339137285948, 0.00012889619392808527, 9.4276263553183526e-05, 0.00016278830298688263, 6.5630018070805818e-05, 0.00025007495423778892, 9.8793541837949306e-05, 0.00022963566880207509, 0.00010267191100865602, 8.5129649960435927e-05, 0.00022896053269505501, 0.00017656134150456637, 0.00024905477766878903, 0.0001641658745938912, 0.00018248565902467817, 0.00016606634017080069, 0.00012546649668365717, 0.00013088712876196951, 7.0305919507518411e-05, 0.00010465917875990272, 0.00018679718778003007, 0.0001188798705697991, 0.00019908625108655542, 0.00012358051026239991, 0.00016169656009878963, 9.9304801551625133e-05, 0.0001657459361013025, 0.00015324781998060644, 0.00014092835772316903, 0.0001212545030284673, 8.0865640484262258e-05, 0.00012319405504968017, 9.7401898528914899e-05, 0.00020428982679732144, 0.00022087289835326374, 0.00016656266234349459, 0.00016739488637540489, 0.00017523109272588044, 0.00013254978694021702, 9.5991876150947064e-05, 0.00025345120229758322, 0.00010866248339880258, 9.3205468147061765e-05, 0.00014999258564785123, 0.00014744250802323222, 0.00017465655400883406, 7.8300654422491789e-05, 0.00015865087334532291, 0.00031234830385074019, 5.5146345403045416e-05, 0.00012023242743453011, 0.00024969593505375087, 0.00015805124712642282, 7.1348214987665415e-05, 0.00012726831482723355, 0.00014708620437886566, 0.00012691330630332232, 0.0001526836131233722, 0.00013742853479925543, 0.00014507547894027084, 0.00024148373631760478, 0.00017541495617479086, 5.9625061112456024e-05, 0.00015915608673822135, 0.00013440012116916478, 0.00017569656483829021, 0.00023155874805524945, 0.00014001452655065805, 6.8268702307250351e-05, 0.00011179297143826261, 8.0947727838065475e-05, 0.000119494587124791, 0.00022907108359504491, 0.0001929533900693059, 0.00028787160408683121, 0.00018788009765557945, 8.1930571468546987e-05, 0.0001907196274260059, 0.00017111173656303436, 0.00013129127910360694, 0.00013816214050166309, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 61,-11,21,83,-127,-48,96,63,62,74,-32,48,-19,25,51,54, 
  /* [1][0][][] */ -51,8,-127,37,126,123,-36,41,-13,-8,-68,2,-74,74,-72,-36, 
  /* [2][0][][] */ -49,87,76,3,72,109,-3,38,48,-8,52,0,81,-127,-5,24, 
  /* [3][0][][] */ 127,-34,46,11,46,14,-27,6,40,57,-39,24,-36,84,-4,36, 
  /* [4][0][][] */ -123,-53,-44,9,-52,-49,-121,-7,-27,111,-39,-68,25,-3,-116,127, 
  /* [5][0][][] */ -96,5,6,17,115,55,1,47,-75,-22,-20,-41,-50,22,-127,-20, 
  /* [6][0][][] */ -127,30,-35,26,-10,-85,85,11,-4,-16,-65,70,13,19,-38,-18, 
  /* [7][0][][] */ -36,77,68,-127,109,59,107,61,82,30,12,28,57,56,-90,-39, 
  /* [8][0][][] */ -20,-22,-44,103,-43,82,-49,-64,32,-38,90,44,115,97,-127,-28, 
  /* [9][0][][] */ -4,-127,11,78,-71,-38,24,85,72,10,43,74,-62,5,-1,-22, 
  /* [10][0][][] */ -45,-38,-112,44,-51,127,31,-37,-1,-13,78,-25,-8,54,-77,52, 
  /* [11][0][][] */ -27,-48,-56,-22,1,68,36,-29,-18,32,43,-61,4,101,-127,67, 
  /* [12][0][][] */ -12,-120,-53,50,-98,-127,17,68,60,48,-50,75,13,-66,-14,-35, 
  /* [13][0][][] */ -79,-9,-53,-2,-11,17,22,18,-33,127,-7,-33,20,11,3,1, 
  /* [14][0][][] */ -125,30,-127,-94,15,96,-11,-87,42,3,126,45,73,-77,-89,-87, 
  /* [15][0][][] */ 10,-127,91,-71,-57,-21,-3,66,30,-40,-67,-25,60,-28,-43,-52, 
  /* [16][0][][] */ -20,-54,48,-16,26,-3,-21,-7,82,-127,10,-18,-3,15,-78,-105, 
  /* [17][0][][] */ -44,61,-3,-92,14,56,-76,-4,59,-23,62,84,75,-111,-59,-127, 
  /* [18][0][][] */ 50,18,-41,-127,22,-11,127,-64,12,91,6,50,-14,39,-19,-78, 
  /* [19][0][][] */ -19,5,-117,-68,-55,127,84,-51,6,-33,89,-123,-21,14,-18,13, 
  /* [20][0][][] */ -7,45,56,-73,27,-2,-35,70,-63,-127,32,-93,-29,70,-15,-4, 
  /* [21][0][][] */ 0,-118,-23,3,76,40,49,123,-33,-73,25,26,127,-105,-47,15, 
  /* [22][0][][] */ 66,-17,67,-7,17,1,27,19,23,127,45,36,19,28,101,-9, 
  /* [23][0][][] */ -127,-120,23,27,100,6,-9,-7,-10,51,-45,-70,-22,125,98,66, 
  /* [24][0][][] */ 30,-29,47,20,52,-87,25,-43,33,107,-127,55,-27,-78,53,-43, 
  /* [25][0][][] */ 61,-54,59,127,-19,-11,-73,37,-91,17,53,-31,-37,32,83,4, 
  /* [26][0][][] */ -22,7,16,46,-32,85,-25,40,-48,-18,-79,32,-15,34,37,-127, 
  /* [27][0][][] */ 20,-4,-8,-34,-48,8,-81,7,-85,-33,-59,-53,-64,32,-16,127, 
  /* [28][0][][] */ -52,-1,27,22,12,-38,-127,24,8,-34,0,-12,8,-35,-31,-5, 
  /* [29][0][][] */ -46,-85,-49,74,-13,17,127,-20,37,63,-96,74,52,-21,-50,79, 
  /* [30][0][][] */ 36,-105,-63,50,-127,-11,14,18,3,-30,-28,-39,-35,52,24,46, 
  /* [31][0][][] */ -127,6,-10,68,-51,27,-32,-3,-15,-64,24,-28,4,-57,1,113, 
  /* [32][0][][] */ -124,-122,-72,6,-98,-84,15,12,127,53,-77,-61,56,72,60,-28, 
  /* [33][0][][] */ -26,0,-107,68,-98,-91,32,4,-127,34,-36,-51,-54,106,50,86, 
  /* [34][0][][] */ 54,110,-20,28,-76,-87,73,-34,2,-127,-48,43,-102,-28,98,112, 
  /* [35][0][][] */ 59,-1,-49,-16,-127,25,80,-48,30,50,-3,-4,41,72,5,43, 
  /* [36][0][][] */ -24,-23,-45,74,127,-29,20,81,-66,25,-45,-45,-9,4,19,31, 
  /* [37][0][][] */ -127,32,7,-59,52,-96,-47,-20,-30,-5,-35,39,34,-50,10,-101, 
  /* [38][0][][] */ 36,67,27,-32,-95,-55,-127,-19,-32,-68,23,0,-92,-117,104,-18, 
  /* [39][0][][] */ 70,-66,33,79,13,68,85,-34,-25,57,29,11,-19,123,60,127, 
  /* [40][0][][] */ 73,30,48,112,-24,-57,-18,16,-95,73,-3,-24,-29,16,127,14, 
  /* [41][0][][] */ -12,-34,29,45,-79,83,-12,69,-30,23,-110,3,21,33,44,-127, 
  /* [42][0][][] */ -20,-103,94,-17,120,25,81,9,-15,-107,-127,-57,-58,-16,11,32, 
  /* [43][0][][] */ -55,-49,-82,-5,84,62,12,84,-60,-89,-61,-67,127,-6,-98,88, 
  /* [44][0][][] */ -19,-84,-51,-84,48,72,108,31,-36,-127,-74,74,-11,55,22,126, 
  /* [45][0][][] */ 22,-9,-63,-24,-127,73,-54,-29,66,-42,23,-42,8,-32,-7,29, 
  /* [46][0][][] */ 5,-83,-59,-10,120,-99,2,127,-48,-33,58,83,-110,-49,102,-82, 
  /* [47][0][][] */ -38,-24,16,79,22,7,37,36,-19,127,81,99,-35,100,18,95, 
  /* [48][0][][] */ 31,-17,-66,-75,40,-79,-10,56,50,-55,-29,-14,-81,14,-4,-127, 
  /* [49][0][][] */ 21,41,-23,-3,13,4,55,15,-52,127,-16,30,-28,0,41,88, 
  /* [50][0][][] */ 3,12,-7,-14,-127,1,10,-52,49,13,46,64,-2,-75,-6,14, 
  /* [51][0][][] */ 22,-26,-12,-117,-28,97,65,-101,45,-30,43,-67,29,127,-8,27, 
  /* [52][0][][] */ 34,-5,-12,-79,79,-93,-17,-27,42,5,127,-39,14,-20,-40,73, 
  /* [53][0][][] */ -37,-44,46,-44,-19,-127,26,-80,2,115,-62,95,-13,1,6,-82, 
  /* [54][0][][] */ 8,66,24,-26,-109,-43,-127,-50,-22,22,40,34,-91,-69,25,-13, 
  /* [55][0][][] */ 6,-3,9,94,-22,12,27,-9,33,127,4,98,-7,30,46,55, 
  /* [56][0][][] */ -36,-97,-126,127,-56,51,-5,69,64,29,42,21,-74,-74,83,111, 
  /* [57][0][][] */ 67,25,113,-72,55,-6,-28,-20,39,-32,47,127,30,-20,102,-47, 
  /* [58][0][][] */ 127,-47,33,-35,59,-9,61,126,101,116,4,119,104,98,94,-9, 
  /* [59][0][][] */ -58,49,-12,-55,25,-54,16,-7,16,10,-80,-77,-127,-108,70,17, 
  /* [60][0][][] */ 49,-22,50,21,6,-44,38,-83,-8,127,-18,108,-12,25,16,-18, 
  /* [61][0][][] */ 82,81,-53,-58,-90,-127,3,-76,-47,-9,-21,5,-59,-64,92,85, 
  /* [62][0][][] */ -3,93,-39,-12,-46,127,-30,18,-25,13,-26,32,-17,6,35,-64, 
  /* [63][0][][] */ 4,13,-66,-127,-4,-15,81,-30,-19,-63,-37,6,-29,53,25,-27, 
  /* [64][0][][] */ -26,2,26,-14,48,-78,6,91,-105,-9,-89,-43,-66,58,127,45, 
  /* [65][0][][] */ -36,-5,-18,-14,28,24,-26,-71,-111,-49,30,-14,-127,59,-28,47, 
  /* [66][0][][] */ -30,50,17,27,-51,127,-29,16,-66,30,-46,31,-24,59,49,-107, 
  /* [67][0][][] */ 25,-5,-56,-1,2,-59,100,-90,-27,-7,37,127,-34,8,71,-67, 
  /* [68][0][][] */ -35,-86,-52,121,-53,-6,66,127,14,-9,97,51,-116,51,24,25, 
  /* [69][0][][] */ 24,30,66,-69,59,-28,-63,96,21,91,3,42,25,-49,16,-127, 
  /* [70][0][][] */ 60,3,87,-2,104,-8,-123,-26,-127,-106,-37,24,-51,105,-125,-43, 
  /* [71][0][][] */ -36,-103,12,-29,87,-17,58,41,-78,63,-115,-23,13,127,-16,35, 
  /* [72][0][][] */ 3,15,48,7,-44,-22,-93,-56,-3,40,-38,32,34,108,-127,-2, 
  /* [73][0][][] */ -21,-34,-60,-46,44,-102,27,-36,94,88,113,-45,14,-53,-116,127, 
  /* [74][0][][] */ 20,21,-16,74,-94,15,109,24,78,43,32,92,127,-10,-25,38, 
  /* [75][0][][] */ -22,36,-39,12,-54,127,2,11,-34,21,-31,17,-16,43,-3,-61, 
  /* [76][0][][] */ -89,38,-43,127,-122,-28,-26,76,55,6,-74,-93,74,-35,-102,70, 
  /* [77][0][][] */ 84,118,-127,66,62,82,79,20,19,9,91,-29,94,11,69,35, 
  /* [78][0][][] */ 27,-34,18,-60,66,-111,47,-66,69,31,113,-37,28,-47,-34,127, 
  /* [79][0][][] */ -34,69,14,17,-27,-10,-2,-19,-127,-24,53,7,102,18,-82,-23, 
  /* [80][0][][] */ -96,8,110,16,67,23,1,-127,-111,23,-94,-61,-67,-30,81,81, 
  /* [81][0][][] */ 77,50,-12,-2,12,-25,62,127,-53,72,-39,-23,-15,7,88,101, 
  /* [82][0][][] */ 56,35,19,-19,-12,-127,74,-45,77,22,-108,49,127,38,117,-84, 
  /* [83][0][][] */ 8,-7,6,2,16,54,8,-127,11,-32,102,43,56,-21,-22,-85, 
  /* [84][0][][] */ -108,-74,-38,-19,0,88,99,6,51,58,91,127,60,84,-49,51, 
  /* [85][0][][] */ 106,-21,57,-99,110,-8,-37,59,44,127,-77,-21,6,33,52,-14, 
  /* [86][0][][] */ -105,89,-65,52,73,96,21,-4,77,40,127,-43,-43,61,-7,0, 
  /* [87][0][][] */ 11,-60,28,-39,46,-127,16,-28,50,4,48,-26,30,-25,-29,55, 
  /* [88][0][][] */ -57,36,42,11,80,-42,60,27,-51,-85,81,-59,40,127,117,-108, 
  /* [89][0][][] */ -20,45,3,21,-29,127,-30,7,-57,23,-38,23,-4,46,-6,-96, 
  /* [90][0][][] */ 26,-65,6,33,94,35,50,50,-37,-127,-101,-49,21,-35,-79,58, 
  /* [91][0][][] */ -16,25,-19,-58,3,-61,-90,-21,-62,43,-53,-63,-127,-48,-41,-19, 
  /* [92][0][][] */ 56,69,49,43,-127,-45,-3,-23,-9,27,-16,-38,6,-85,26,1, 
  /* [93][0][][] */ 3,-127,-76,67,-33,-56,0,47,59,40,-30,12,-62,71,50,-59, 
  /* [94][0][][] */ 127,-8,126,-21,33,-25,-16,36,33,74,3,64,13,18,71,-18, 
  /* [95][0][][] */ -40,-7,17,-69,127,-20,66,23,20,19,-98,-40,26,-16,-65,10, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0044424948282539845, 0.002031378448009491, 0.0036634893622249365, 0.003489319235086441, 0.0028324539307504892, 0.0013828511582687497, 0.0038417226169258356, 0.002798161469399929, 0.0016328936908394098, 0.0045390604063868523, 0.0011151506332680583, 0.0039556436240673065, 0.0032706772908568382, 0.0042112050577998161, 0.0017154684755951166, 0.0022801537998020649, 0.0023072329349815845, 0.0016875385772436857, 0.0029138994868844748, 0.001174772740341723, 0.0044763241894543171, 0.0017683976329863071, 0.0041104624979197979, 0.0018378201639279723, 0.0015238148625940084, 0.0040983776561915874, 0.0031604359392076731, 0.0044580632820725441, 0.0029385578818619251, 0.0032664807513356209, 0.0029725760687142611, 0.0022458415478467941, 0.0023428706917911768, 0.0012584711657837033, 0.0018733920296654105, 0.0033436568919569254, 0.0021279414650052786, 0.003563630161806941, 0.0022120827343314886, 0.0028943573124706745, 0.0017775491578504443, 0.0029668407514691353, 0.0027431254275143147, 0.0025226077996194363, 0.0021704472601413727, 0.0014474893687292933, 0.0022051651030778885, 0.0017434873152524233, 0.0036567738279700279, 0.0039536096155643463, 0.0029814601875841618, 0.00299635692499578, 0.0031366243492811918, 0.002372632035985589, 0.0017182480078190565, 0.0045367591083049774, 0.0019450508989393711, 0.0016683714929968119, 0.0026848569978028536, 0.0026392107829451561, 0.0031263402197510004, 0.0014015763299539685, 0.0028398397844284773, 0.0055910130031406879, 0.00098711578175425529, 0.0021521521266549826, 0.0044695399701595306, 0.0028291062917560339, 0.0012771281180903316, 0.0022780939470976591, 0.0026328328531235456, 0.0022717395331710577, 0.0027330261655151844, 0.0024599612224847078, 0.0025968409609049559, 0.00432254234328866, 0.0031399156432598829, 0.001067284494638443, 0.0028488829266279936, 0.0024057528935372829, 0.0031449564266949892, 0.0041448855772614479, 0.0025062502827495337, 0.0012220051139593124, 0.0020010864827781916, 0.0014489587629213929, 0.0021389448083937168, 0.0041003567166626453, 0.0034538523759692907, 0.0051528816111385822, 0.003363040741533041, 0.0014665515627712011, 0.003413868136703968, 0.0030628882814198732, 0.0023501047398895025, 0.0024730928707867861, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -6716, 15856, -27603, -2297, 9278, -13454, -39823, -7092, -5904, 7343, -13802, -15581, 6387, -5404, -3368, 229, };
const TfArray<16, float> quant20_scale = { 16, { 0.00012390394113026559, 0.00010662095155566931, 0.00011764468945330009, 0.00013185977877583355, 0.00010943585948552936, 0.00014438678044825792, 9.2893147666472942e-05, 0.00017361328355036676, 6.713999027851969e-05, 6.6533488279674202e-05, 0.00019883853383362293, 0.00013543781824409962, 0.00010572730388958007, 9.4829600129742175e-05, 0.00012470221554394811, 0.00014931857003830373, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 27,51,21,-31,76,64,-48,45,-2,103,6,58,-34,22,-21,43,50,93,55,-54,-69,93,-21,43,58,54,40,56,-41,-50,-9,70,-10,-9,-74,55,70,-127,-25,16,17,-32,49,-10,-14,-62,-62,6, 
  /* [1][0][][] */ -35,-8,-92,-38,1,89,-70,5,-28,-51,-42,39,68,-24,-33,-41,-30,-32,6,17,-57,44,-118,-44,-72,-62,43,70,-38,-19,57,-47,8,-90,-23,47,15,-59,127,-50,-38,35,-56,-10,20,57,22,44, 
  /* [2][0][][] */ -6,5,71,-43,-14,-85,27,20,115,84,-72,27,127,-60,127,100,-53,-6,-16,31,78,-71,-16,-97,19,-26,53,-66,37,28,-62,19,49,-20,51,62,-51,23,8,-18,46,43,71,-10,16,-106,112,-38, 
  /* [3][0][][] */ 23,11,-23,-11,28,127,21,-14,31,-35,30,-13,-52,10,-2,44,-24,-65,35,-117,11,-19,-24,-36,-26,105,120,74,7,-55,12,54,48,-9,85,35,-50,-57,23,44,41,26,-4,-9,50,26,-3,-32, 
  /* [4][0][][] */ 91,-9,28,-45,106,70,56,34,75,-10,-90,31,41,-8,-3,-12,-93,-116,-15,-93,-10,6,-21,-18,-69,113,-84,127,-73,-63,11,81,36,-30,23,-31,-18,8,-12,33,-56,-6,20,48,-40,98,-18,-62, 
  /* [5][0][][] */ -2,-9,-49,-4,-26,45,18,-26,53,52,38,95,55,-20,39,-15,-48,127,-7,44,-5,-7,-62,-17,17,-15,-60,-34,0,26,23,-6,-50,5,41,20,-49,12,-86,-1,86,-26,38,49,-25,12,-39,33, 
  /* [6][0][][] */ 67,9,30,69,18,-24,97,-53,14,56,111,98,43,43,-37,47,35,-30,-47,67,51,-56,-28,25,-82,88,58,11,108,45,-36,20,85,-72,-117,-11,72,42,24,15,12,51,64,-16,80,127,28,-8, 
  /* [7][0][][] */ -87,-16,-15,36,-61,-58,22,44,85,100,-63,-78,-90,7,-6,-23,-76,105,9,110,-37,32,35,26,-24,-88,-43,-71,30,22,-14,3,-16,27,8,-15,5,-56,127,10,-1,22,27,-5,60,66,-31,-14, 
  /* [8][0][][] */ -8,-105,62,-75,80,-64,75,-27,-14,-122,5,21,-31,-14,30,41,-3,-8,-44,113,3,49,-14,19,68,-14,-60,-34,-127,-35,-78,-98,23,-56,-10,79,10,30,120,30,21,4,93,121,-15,-75,-54,84, 
  /* [9][0][][] */ 11,-58,46,-82,60,56,-13,29,11,-23,-42,-1,34,-59,116,-22,23,-109,37,34,-106,53,37,-61,-28,-56,-55,96,45,89,-39,3,-70,17,-25,127,0,-34,-59,-24,-42,-32,40,123,54,96,-82,10, 
  /* [10][0][][] */ -1,3,-25,-5,19,28,-66,-41,29,28,68,10,-19,-30,39,-53,-47,127,-4,46,-11,0,0,15,-52,41,6,77,24,19,-17,-19,68,0,-7,14,-4,-32,-40,14,-68,-3,16,-7,3,35,23,45, 
  /* [11][0][][] */ -36,46,-21,50,38,66,3,-8,-9,20,-127,-55,96,-6,-5,-64,14,43,-44,-53,0,9,93,-14,26,21,-30,42,1,46,1,62,29,-7,-62,1,54,101,106,5,31,-38,61,17,-50,-8,84,15, 
  /* [12][0][][] */ -59,5,28,25,-59,-56,0,8,-36,-39,-127,21,78,-100,24,27,44,113,105,-125,-35,43,-39,-113,-24,-16,26,-36,22,5,-15,78,48,97,48,-35,-68,-25,41,1,-22,32,58,6,67,-10,-42,-39, 
  /* [13][0][][] */ -45,-108,-58,-76,-14,23,61,12,-121,22,127,-75,42,55,120,2,123,18,-28,-97,82,-96,88,-4,-70,0,-29,14,-39,-87,-92,23,26,-14,-67,57,21,-62,61,-77,-12,45,27,19,65,-19,100,-79, 
  /* [14][0][][] */ 54,19,-52,25,-25,21,-76,-26,-26,65,51,42,-16,-58,14,-44,60,-102,24,-1,99,-60,34,-9,-14,127,-93,13,-41,-35,-95,3,107,48,80,-18,-80,10,-12,53,-22,-40,95,-24,-50,-40,-52,43, 
  /* [15][0][][] */ -44,11,34,13,79,-5,-3,21,8,59,-6,44,52,-19,-29,-25,4,39,-1,-40,14,-20,-45,-52,37,-66,-39,52,-54,21,26,-3,-47,-16,127,-5,-85,23,36,-18,-42,-27,10,3,-36,-24,-13,18, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0052659176290035248, 0.0045313904993236065, 0.0049998993054032326, 0.0056040403433144093, 0.0046510240063071251, 0.0061364378780126572, 0.0039479588158428669, 0.0073785646818578243, 0.0028534494340419769, 0.0028276732191443443, 0.0084506375715136528, 0.0057561071589589119, 0.0044934102334082127, 0.0040302579291164875, 0.0052998443134129047, 0.0063460390083491802, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 8352, -947, 15728, 1678, 23171, -2251, 38723, 1177, 8237, 32794, 4883, 22408, 1698, 8855, 41082, 25645, 2464, -6981, 210, 45328, 399, 13997, 2664, 13407, 19159, 42483, -531, -692, 3376, 15821, 19691, -343, 1903, 1868, 1408, 10543, 9306, 22891, 7339, 24720, 20996, 2025, 1076, 11054, -6597, 2635, 42741, 21025, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.0674876042176038e-05, 9.7877215011976659e-05, 8.2391910837031901e-05, 0.00012470757064875215, 0.00012298238289076835, 7.6214440923649818e-05, 6.3974985096137971e-05, 0.00029200734570622444, 5.9818059526151046e-05, 5.8698678913060576e-05, 7.0536058046855032e-05, 9.9713535746559501e-05, 8.5028026660438627e-05, 0.00012581865303218365, 3.762489723158069e-05, 6.9778805482201278e-05, 8.9009925432037562e-05, 8.1332873378414661e-05, 0.00017546777962706983, 4.7170309699140489e-05, 8.0242680269293487e-05, 9.3191898486111313e-05, 0.00011222364992136136, 0.00011234489647904411, 4.6081127948127687e-05, 5.5172291467897594e-05, 4.8037494707386941e-05, 4.5657754526473582e-05, 0.00023209281789604574, 9.7785057732835412e-05, 9.0835812443401664e-05, 0.00024737132480368018, 0.00010428139648865908, 0.00018251304572913796, 6.9142253778409213e-05, 7.5459538493305445e-05, 7.729087519692257e-05, 7.5382573413662612e-05, 6.5923442889470607e-05, 0.00011170373181812465, 6.4297179051209241e-05, 0.00016653622151352465, 0.00021355185890570283, 8.9161956566385925e-05, 0.00018013865337707102, 4.8438887461088598e-05, 4.3902731704292819e-05, 7.1660411776974797e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -108,43,-127,120,-81,44,-31,56,-100,-94,56,-78,27,-59,-13,-97,87,99,72,-127,63,-29,62,-51,-127,-93,45,80,-114,-53,-127,46,127,-105,70,-69,-118,-74,127,-55,25,-106,76,-54,123,83,-77,-80, -71,127,-46,127,-60,103,-57,67,-127,-76,70,-123,41,-87,-37,-77,127,98,127,-111,75,-59,127,-127,-104,-127,99,127,21,-127,-123,-11,116,-127,115,-127,-110,-111,82,-83,-71,127,76,-127,-9,120,-93,-127, -13,25,-28,-7,-41,81,-19,-36,-53,-36,24,-43,38,-33,-42,-49,3,76,64,-45,7,-46,56,0,-122,-43,24,70,83,-46,-29,7,24,-85,36,-42,-22,16,54,-79,-127,-53,35,-34,-58,80,-3,-83, 
  /* [0][1][][] */ -86,106,-4,113,-109,67,-127,38,-83,-69,39,-31,78,-77,-80,-127,61,65,-54,-71,86,-127,46,-84,-109,-50,125,108,-127,-126,-113,127,59,29,122,-117,-127,-127,106,-15,-39,-77,127,-70,127,61,-104,-119, -127,121,-80,110,-122,127,-85,127,-104,-127,127,-127,127,-127,-127,-109,102,127,-24,-74,127,-124,120,-93,-126,-107,127,85,2,-96,-92,34,71,44,127,-77,-117,-114,112,-127,-64,124,101,-80,-15,113,-127,-46, -46,74,-43,44,-44,32,-63,79,-22,-32,62,-62,87,-104,-74,-32,29,81,-29,34,8,-9,35,-58,-97,-41,72,45,98,-99,-32,78,60,-13,50,-36,-81,-26,17,-95,-49,-69,37,-71,-51,127,1,-55, 
  /* [0][2][][] */ -48,93,1,39,-37,55,-122,-10,-88,-20,28,-26,53,-81,-34,-32,107,-7,-72,-17,34,-30,6,-62,-111,-62,105,27,-106,-54,-66,96,41,65,38,-52,-20,-26,11,-105,-29,-32,104,-63,75,11,-98,-5, -50,123,-54,-1,-81,47,-109,-61,-122,-19,25,-61,38,-68,-18,-11,62,28,-71,-11,46,-14,37,-30,-110,-60,99,51,-18,-62,-32,-1,43,57,62,-48,-57,-59,26,-46,-41,41,22,-22,14,20,-90,-7, -18,111,-76,61,-127,26,-62,-38,-82,-1,25,-33,46,-15,-27,49,92,33,-57,-3,54,-16,14,-32,-46,-33,72,40,24,-38,20,25,33,27,47,3,11,5,3,-112,-39,-68,14,-30,-34,83,19,-78, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.003003682242706418, 0.0041597816161811352, 0.0035016562324017286, 0.0053000715561211109, 0.0052267513237893581, 0.0032391136046499014, 0.0027189368847757578, 0.012410311959683895, 0.0025422675535082817, 0.0024946937337517738, 0.0029977825470268726, 0.0042378250509500504, 0.0036136910784989595, 0.0053472928702831268, 0.0015990581596270204, 0.0029655992984771729, 0.0037829217035323381, 0.0034566470421850681, 0.0074573801830410957, 0.0020047381985932589, 0.0034103137440979481, 0.0039606555365025997, 0.004769505001604557, 0.0047746580094099045, 0.0019584479741752148, 0.0023448222782462835, 0.0020415934268385172, 0.0019404545892030001, 0.0098639447242021561, 0.0041558649390935898, 0.00386052206158638, 0.010513280518352985, 0.0044319592416286469, 0.0077568041160702705, 0.0029385457746684551, 0.0032070302404463291, 0.0032848622649908066, 0.0032037592027336359, 0.002801746129989624, 0.0047474084421992302, 0.0027326301205903292, 0.0070777893997728825, 0.0090759536251425743, 0.0037893829867243767, 0.0076558925211429596, 0.0020586526952683926, 0.0018658661283552647, 0.0030455673113465309, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2244, -990, 829, -2280, 6184, -796, 6436, -3258, 1038, 764, 1315, 2621, 243, -914, 912, 4806, -1842, 4321, 4622, 297, -1226, 3124, -877, 3580, 1833, 3425, 1216, -602, 9049, -97, 2668, -1181, -694, 3538, -723, 1429, 1376, 1054, -221, 6555, 1182, 11438, -2284, 1433, 6966, -76, 2215, 2370, };
const TfArray<48, float> quant24_scale = { 48, { 0.00017036664939951152, 0.00033349386649206281, 0.00029606305179186165, 0.00024963050964288414, 0.00015622623322997242, 0.00023014481121208519, 0.00014648775686509907, 0.00018679398635867983, 0.00031451994436793029, 0.00017870325245894492, 0.00032976450165733695, 0.00025429535889998078, 0.0003153321158606559, 0.00023716023133601993, 0.00022295760572887957, 0.0001634931395528838, 0.00031673445482738316, 0.00020843902893830091, 0.0001839852484408766, 0.00041437073377892375, 0.0002275727892993018, 0.00019563891692087054, 0.00023484959092456847, 0.00020990941266063601, 0.00021845100854989141, 0.00015488936332985759, 0.00027225367375649512, 0.0003504319756757468, 0.00010717286932049319, 0.00033393342164345086, 0.0001863741927081719, 0.0002196628920501098, 0.00015948995132930577, 0.00022389335208572447, 0.00026211224030703306, 0.00030389343737624586, 0.00028529754490591586, 0.00025659627863205969, 0.00017774198204278946, 0.00013873727584723383, 0.0003772788040805608, 8.1704180047381669e-05, 0.00021281148656271398, 0.00028580566868185997, 0.00012407994654495269, 0.00028748318436555564, 0.00025561742950230837, 0.00024120077432598919, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 55,44,127,-21,76,108,-85,-40, 
  /* [1][0][][] */ 7,-75,-127,9,61,15,27,-9, 
  /* [2][0][][] */ -127,-3,-42,-41,67,-5,-61,-28, 
  /* [3][0][][] */ 28,56,127,-70,-17,-74,-25,-27, 
  /* [4][0][][] */ -127,-2,-30,-29,41,30,-44,-65, 
  /* [5][0][][] */ -96,39,-67,-5,20,31,-87,-127, 
  /* [6][0][][] */ -41,-110,-127,57,99,-21,9,36, 
  /* [7][0][][] */ -43,-127,-76,-71,-66,-47,26,55, 
  /* [8][0][][] */ 78,44,-3,9,110,-99,-127,13, 
  /* [9][0][][] */ -56,71,-76,100,-89,-47,127,-26, 
  /* [10][0][][] */ -31,127,18,47,117,-27,-12,51, 
  /* [11][0][][] */ -105,-32,-16,-26,-95,107,127,-6, 
  /* [12][0][][] */ 83,41,-127,52,-9,-45,-71,-18, 
  /* [13][0][][] */ 84,-16,-96,34,0,-127,-50,-22, 
  /* [14][0][][] */ -25,-106,127,18,117,-116,-48,49, 
  /* [15][0][][] */ -53,-26,25,127,61,58,-73,41, 
  /* [16][0][][] */ 85,30,-26,4,67,-87,-127,-2, 
  /* [17][0][][] */ 60,127,60,92,52,59,34,-119, 
  /* [18][0][][] */ 40,-30,13,-26,127,-25,36,-30, 
  /* [19][0][][] */ -2,127,41,-6,-88,16,15,-14, 
  /* [20][0][][] */ -26,50,42,-127,31,25,-38,109, 
  /* [21][0][][] */ -53,82,11,-127,17,65,0,116, 
  /* [22][0][][] */ -65,-55,-107,22,-127,124,98,-32, 
  /* [23][0][][] */ 126,36,-127,38,28,-23,-92,-22, 
  /* [24][0][][] */ -35,51,9,-5,-5,79,-127,99, 
  /* [25][0][][] */ -117,-61,-127,25,-57,-72,75,103, 
  /* [26][0][][] */ 49,-20,-37,-42,127,-14,109,-39, 
  /* [27][0][][] */ 127,-61,29,93,3,4,-12,82, 
  /* [28][0][][] */ 53,66,45,-18,126,-127,84,-85, 
  /* [29][0][][] */ -18,-14,-19,-26,-50,5,127,-21, 
  /* [30][0][][] */ 70,-114,-71,-127,-114,-1,39,-99, 
  /* [31][0][][] */ 8,38,-9,-14,-127,1,-31,-9, 
  /* [32][0][][] */ 50,-60,-68,77,-26,-113,104,-127, 
  /* [33][0][][] */ 32,127,46,64,58,-2,-56,11, 
  /* [34][0][][] */ -112,-40,127,-10,-12,123,101,14, 
  /* [35][0][][] */ -57,83,127,-14,-60,-46,-27,39, 
  /* [36][0][][] */ -106,15,91,-4,-25,127,72,35, 
  /* [37][0][][] */ -29,-93,-4,-127,-33,-108,102,54, 
  /* [38][0][][] */ 36,-5,85,-50,49,47,-127,16, 
  /* [39][0][][] */ -50,106,-127,-43,-13,-15,31,55, 
  /* [40][0][][] */ 55,-49,32,24,16,-13,17,127, 
  /* [41][0][][] */ -46,127,121,8,20,108,-67,38, 
  /* [42][0][][] */ 65,-98,-78,-13,-127,0,-4,-65, 
  /* [43][0][][] */ -25,-77,31,-60,127,-31,27,25, 
  /* [44][0][][] */ 34,127,102,42,-12,61,-109,40, 
  /* [45][0][][] */ -38,51,7,88,-127,50,-117,32, 
  /* [46][0][][] */ -32,-47,66,45,-127,-85,-23,-7, 
  /* [47][0][][] */ -27,74,33,-127,-124,59,-20,57, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0017043169355019927, 0.0033362118992954493, 0.0029617606196552515, 0.0024972581304609776, 0.0015628586988896132, 0.0023023267276585102, 0.0014654367696493864, 0.0018686529947444797, 0.0031463999766856432, 0.0017877147765830159, 0.0032989038154482841, 0.0025439243763685226, 0.0031545250676572323, 0.0023725077044218779, 0.0022304272279143333, 0.0016355555271729827, 0.0031685535795986652, 0.0020851860754191875, 0.0018405548762530088, 0.0041452893055975437, 0.0022765966132283211, 0.0019571359734982252, 0.0023493925109505653, 0.0020998953841626644, 0.0021853439975529909, 0.0015494849067181349, 0.0027235760353505611, 0.0035056574270129204, 0.0010721378494054079, 0.0033406091388314962, 0.0018644534284248948, 0.0021974674891680479, 0.0015955083072185516, 0.0022397881839424372, 0.002622123109176755, 0.0030400943942368031, 0.0028540645726025105, 0.0025669422466307878, 0.0017780984053388238, 0.0013879024190828204, 0.00377422827295959, 0.00081735372077673674, 0.0021289272699505091, 0.0028591477312147617, 0.0012412731302902102, 0.002875929232686758, 0.0025571500882506371, 0.0024129285011440516, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 10237, 4324, 21355, -317, 6914, -16212, 3911, -15138, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.3856288508977741e-05, 7.7818011050112545e-05, 0.00012365035945549607, 0.00012137610610807315, 0.00012654962483793497, 0.00010028725955635309, 5.9833637351403013e-05, 0.00012442113074939698, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -40,-38,-18,-101,-15,-23,55,70,-88,-79,-41,-6,-76,-3,-56,28,-127,15,-5,126,54,-33,-20,84,67,61,13,-13,-112,-55,-88,-53,-51,99,35,-69,31,-57,89,8,40,8,-4,-124,23,-30,-13,-101, 
  /* [1][0][][] */ -6,45,-30,-62,-80,83,-11,-50,-53,80,-11,10,56,31,-32,-5,-13,-127,54,-65,105,0,-59,66,91,1,-100,48,33,-23,85,32,-34,-19,-4,-17,-2,117,-27,-62,42,46,-3,15,99,-12,-53,56, 
  /* [2][0][][] */ -21,-29,117,6,92,-38,1,36,-38,9,-5,38,7,-47,-34,-127,-41,-92,-33,12,-93,15,-31,-26,-35,35,5,-36,-24,-11,-24,-15,-9,16,30,-5,26,-31,-49,10,23,-29,30,-42,-47,-46,-58,-54, 
  /* [3][0][][] */ 56,12,53,-17,5,-38,29,48,-74,-13,44,-39,-81,49,-25,42,45,28,-48,23,-127,-64,117,3,-2,-2,-69,-52,-59,72,100,-80,11,-118,-36,44,22,-76,-33,68,-60,-64,63,-11,-112,-75,56,-23, 
  /* [4][0][][] */ 28,-5,56,-40,-12,-20,-11,-18,-49,-17,-25,-5,34,-78,31,-92,40,41,-30,-40,-7,28,24,17,-12,-1,42,-25,17,39,-127,-28,-17,-26,-12,32,41,1,33,-2,-20,-13,-60,24,-29,-85,12,8, 
  /* [5][0][][] */ 45,-48,71,51,31,32,19,4,-73,-36,-38,23,22,-7,4,-50,99,88,2,-40,90,-56,127,-105,-16,41,5,58,5,23,-42,-54,-14,-45,-44,9,45,48,90,-16,-113,45,24,30,62,-6,90,-1, 
  /* [6][0][][] */ -51,40,-127,79,39,12,45,7,-29,-5,31,-61,-87,-9,-15,35,-119,18,-14,89,7,37,-87,-78,-14,-23,40,55,-25,-53,-43,24,26,70,-43,-18,1,-22,74,26,69,64,-106,-34,-52,100,-60,-43, 
  /* [7][0][][] */ 17,79,-65,40,15,37,127,78,31,69,-92,-9,-25,1,-63,-52,37,17,90,81,64,-9,126,23,107,65,-27,95,-44,14,16,-52,23,-66,-15,33,8,93,-48,77,-68,49,-28,-67,74,-25,35,-49, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0031388921197503805, 0.0033072654623538256, 0.0052551403641700745, 0.0051584844477474689, 0.0053783589974045753, 0.0042622084729373455, 0.0025429294910281897, 0.0052878977730870247, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 1438, 3230, -1419, -1201, 1563, -2323, -148, -6106, -131, -195, -15603, -103, 1642, -1023, -2881, 2261, 7343, -853, -309, -7667, -6301, -868, 26000, -4847, -4031, -1705, 404, -6764, 260, 1899, -7909, 8613, 6417, -1054, 4426, -52, 48, 167, 11463, 1928, 5311, -4362, 3358, 6978, 68, 6709, -2877, 1024, };
const TfArray<48, float> quant28_scale = { 48, { 0.00047245531459338963, 0.00014133393415249884, 0.00062941957730799913, 0.00028838249272666872, 0.00026221774169243872, 0.00027756602503359318, 0.00027837679954245687, 0.00028263911372050643, 0.00015878223348408937, 0.00037014050758443773, 0.00010196396760875359, 0.0016455614240840077, 0.00047680013813078403, 0.00046045900671742857, 0.00037796222022734582, 0.00078236364061012864, 0.00021203771757427603, 5.3223575378069654e-05, 0.00037655170308426023, 0.0002155341935576871, 0.00022931989224161953, 0.00023986793530639261, 6.5808751969598234e-05, 0.00042482686694711447, 0.00024448224576190114, 0.00044516782509163022, 0.00036622156039811671, 0.00019430338579695672, 0.00023183562734629959, 0.00053425703663378954, 0.00015173503197729588, 0.00013527891132980585, 0.00010872931306948885, 0.00017648965877015144, 0.00014697745791636407, 0.00039872023626230657, 0.0021257852204144001, 0.00049945991486310959, 0.00014232992543838918, 0.00021286970877554268, 0.0002062446583295241, 0.00013124958786647767, 0.00034428443177603185, 0.00027661561034619808, 0.00046529399696737528, 9.2999718617647886e-05, 5.5505981435999274e-05, 0.00021813969942741096, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 19,-44,13,19,-27,-41,-23,58,-59,-2,38,5,38,-12,-14,7,90,44,17,16,-8,-19,-59,17,17,-11,1,-9,-67,68,-17,-127,39,-8,-55,-76,-16,-40,21,-64,-20,51,30,-7,-17,86,127,-17, -127,-123,-18,127,-74,74,-78,127,-3,33,24,-1,41,33,-14,-31,-38,67,21,21,18,127,7,127,127,-27,-59,44,66,-127,-9,-54,52,1,-34,-122,18,14,-59,-65,-127,25,-77,-127,34,59,69,127, -27,25,16,17,-30,64,35,65,-30,-29,17,14,-19,5,-7,11,-62,54,-58,-11,8,-24,127,43,-25,5,3,17,11,30,13,-38,-9,-11,-41,121,-3,-1,-4,86,11,-2,31,-38,-12,28,7,7, 
  /* [0][1][][] */ -8,-14,-24,4,26,-49,127,-76,-28,12,69,31,127,-19,-9,-30,-43,4,26,60,57,-70,46,3,-42,127,-79,-31,127,-101,60,-96,-57,0,-86,-8,10,-63,-17,-26,113,127,-3,-94,-65,-41,-2,72, 69,-127,127,5,127,65,-44,-59,14,127,127,-127,-104,127,127,127,127,127,127,127,127,120,-6,0,94,-94,-127,110,35,111,127,27,-127,127,127,127,-127,127,-127,-127,53,46,-127,-4,127,-127,-2,61, 15,100,-36,-1,-52,127,-104,105,47,-66,25,58,-36,28,15,-49,5,23,-99,39,20,-124,-38,11,60,-11,-6,127,-80,-47,53,-44,-27,15,88,-19,36,6,-16,-79,108,10,34,42,-59,85,103,-93, 
  /* [0][2][][] */ 3,59,6,-25,-5,-50,-4,15,12,-1,66,4,-11,-30,3,-8,-87,64,3,-25,-15,-15,79,-20,-70,6,75,-21,9,-9,-6,40,-3,-2,-78,4,-15,-23,32,34,-38,-15,-7,-15,-24,32,-6,8, 32,9,-34,-26,30,38,116,-70,127,-28,28,10,-81,-20,-12,-65,-52,119,1,51,-4,26,-34,-38,-54,60,126,-5,-98,3,-32,22,-15,20,-53,0,47,-21,-10,109,-125,-6,-17,46,28,59,9,-116, -9,88,6,-17,-6,4,-5,-12,-42,-17,5,7,14,6,-3,17,23,46,-34,7,-11,-35,-54,-9,15,-20,65,-7,-20,2,-14,48,48,0,-29,-51,-17,4,15,13,-10,-25,-1,25,-24,5,55,-81, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.020079350098967552, 0.0060066920705139637, 0.026750331744551659, 0.012256256304681301, 0.011144253425300121, 0.011796556413173676, 0.011831013485789299, 0.012012162245810032, 0.0067482450976967812, 0.015730971470475197, 0.0043334686197340488, 0.069936357438564301, 0.020264005288481712, 0.019569506868720055, 0.016063394024968147, 0.033250454813241959, 0.0090116029605269432, 0.0022620018571615219, 0.016003446653485298, 0.0091602029278874397, 0.0097460951656103134, 0.010194387286901474, 0.0027968720532953739, 0.018055140972137451, 0.010390494950115681, 0.018919631838798523, 0.015564415603876114, 0.0082578938454389572, 0.0098530137911438942, 0.022705923765897751, 0.0064487387426197529, 0.0057493536733090878, 0.0046209958381950855, 0.007500810083001852, 0.0062465420924127102, 0.016945609822869301, 0.090345866978168488, 0.021227044984698296, 0.0060490216128528118, 0.0090469624847173691, 0.0087653975933790207, 0.0055781076662242413, 0.014632088132202625, 0.011756163090467453, 0.019774993881583214, 0.003952487837523222, 0.0023590042255818844, 0.0092709371820092201, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3380, 4249, 6502, 953, 2511, -1135, 2719, 15531, 1909, -402, 4348, -2007, 9660, -1888, 1779, 12322, -716, 2777, 259, 2023, 2983, 3146, 97, 18342, 6191, 2236, 17297, 1739, 3214, 3839, 438, 1152, 359, 1167, -171, 296, -2333, -298, 2933, 2472, 3865, 3825, 3628, 6384, 3999, 1984, 1347, 9306, };
const TfArray<48, float> quant30_scale = { 48, { 0.00020105649309698492, 0.00018568387895356864, 0.00013956839393358678, 0.0002682149934116751, 0.00023546784359496087, 0.00027421364211477339, 0.00031073455465957522, 6.4339394157286733e-05, 0.00028544050292111933, 0.00025566102704033256, 0.00020689045777544379, 0.00026034071925096214, 9.9514501926023513e-05, 0.00022456681472249329, 0.00030233757570385933, 8.5381194367073476e-05, 0.00031998322810977697, 0.00021368694433476776, 0.00028974132146686316, 0.000273180688964203, 0.0002164848119718954, 0.00025886081857606769, 0.00042583062895573676, 6.0510923503898084e-05, 0.00013758669956587255, 0.00022204892593435943, 6.2119965150486678e-05, 0.00025878744781948626, 0.00024317891802638769, 0.0001954844337888062, 0.0004529471043497324, 0.00040295076905749738, 0.00028086767997592688, 0.00023987291206140071, 0.00034748288453556597, 0.00027458739350549877, 0.00026702266768552363, 0.00033325699041597545, 0.00023672412498854101, 0.00022201056708581746, 0.00020800417405553162, 0.0001765572524163872, 0.00023819743364583701, 0.00015690785949118435, 0.00018043922318611294, 0.00033834742498584092, 0.00049613986629992723, 0.00010584465053398162, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 63,73,-127,-49,-12,67,28,5, 
  /* [1][0][][] */ 59,-73,86,-116,-56,88,-127,-44, 
  /* [2][0][][] */ -45,114,127,46,98,1,58,18, 
  /* [3][0][][] */ 115,29,-111,43,8,-83,-127,-45, 
  /* [4][0][][] */ -75,28,26,-34,-59,127,76,86, 
  /* [5][0][][] */ 22,50,-127,-61,0,73,47,-20, 
  /* [6][0][][] */ -18,106,43,33,52,8,36,-127, 
  /* [7][0][][] */ 127,-2,-36,17,53,17,116,71, 
  /* [8][0][][] */ 62,127,73,87,105,81,90,-72, 
  /* [9][0][][] */ 67,84,-127,-85,-11,122,26,51, 
  /* [10][0][][] */ -55,-34,16,-48,-16,-20,-59,127, 
  /* [11][0][][] */ 1,-127,-110,-31,29,-2,59,-20, 
  /* [12][0][][] */ -52,-114,-127,-12,-111,59,-69,41, 
  /* [13][0][][] */ -8,37,-112,115,-127,-15,-19,-6, 
  /* [14][0][][] */ -52,-42,-127,12,56,-14,-43,-64, 
  /* [15][0][][] */ 8,-102,-127,8,-76,2,-4,-18, 
  /* [16][0][][] */ 127,-69,-13,73,-65,1,28,112, 
  /* [17][0][][] */ -4,112,127,-6,-24,-24,-45,-33, 
  /* [18][0][][] */ -5,-127,37,64,7,-61,65,-96, 
  /* [19][0][][] */ 127,-46,-74,13,-82,-9,37,94, 
  /* [20][0][][] */ -36,-127,79,59,-18,-96,10,-81, 
  /* [21][0][][] */ 7,-14,-10,-8,127,20,39,8, 
  /* [22][0][][] */ -127,36,-56,50,65,64,-109,-115, 
  /* [23][0][][] */ -96,-29,71,28,-103,127,92,-5, 
  /* [24][0][][] */ -63,56,-7,-36,-64,127,125,33, 
  /* [25][0][][] */ -103,-127,-127,-68,-48,5,-8,-57, 
  /* [26][0][][] */ -33,50,-17,127,-119,52,-36,7, 
  /* [27][0][][] */ 18,-124,33,63,28,-47,12,-127, 
  /* [28][0][][] */ 18,127,66,47,93,3,33,-51, 
  /* [29][0][][] */ 111,-36,-63,-13,74,-127,-39,-12, 
  /* [30][0][][] */ 31,-2,20,-127,20,-26,32,-51, 
  /* [31][0][][] */ 45,-25,19,75,-3,21,-2,127, 
  /* [32][0][][] */ -127,-67,3,-80,-92,120,53,103, 
  /* [33][0][][] */ -15,41,52,-36,38,127,-100,52, 
  /* [34][0][][] */ 36,127,-58,-42,16,45,-69,40, 
  /* [35][0][][] */ 2,-123,31,78,-32,-127,26,-79, 
  /* [36][0][][] */ -33,-37,-57,-20,-127,-37,-23,-10, 
  /* [37][0][][] */ -30,-127,53,83,-5,-59,-5,-62, 
  /* [38][0][][] */ -73,29,65,-62,-127,-67,-61,88, 
  /* [39][0][][] */ 38,-127,67,67,-24,-93,-28,-60, 
  /* [40][0][][] */ -1,63,0,34,-127,-11,-43,24, 
  /* [41][0][][] */ 127,120,-85,-106,36,27,-7,-30, 
  /* [42][0][][] */ -14,-41,-38,11,127,29,64,11, 
  /* [43][0][][] */ 127,21,70,28,-79,-38,64,80, 
  /* [44][0][][] */ 101,77,-17,-7,96,-115,-127,44, 
  /* [45][0][][] */ 40,14,8,8,59,-127,-14,-51, 
  /* [46][0][][] */ 67,-32,-10,127,50,33,2,55, 
  /* [47][0][][] */ -103,-102,86,127,-74,38,125,-92, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0024078518617898226, 0.0022237496450543404, 0.0016714705852791667, 0.0032121418043971062, 0.0028199621010571718, 0.0032839816994965076, 0.003721355926245451, 0.00077052839333191514, 0.0034184344112873077, 0.0030617956072092056, 0.0024777194485068321, 0.0031178395729511976, 0.0011917853262275457, 0.0026894113980233669, 0.0036207940429449081, 0.0010225248988717794, 0.0038321181200444698, 0.0025591142475605011, 0.0034699412062764168, 0.0032716109417378902, 0.0025926213711500168, 0.0031001165043562651, 0.005099746398627758, 0.00072467862628400326, 0.0016477378085255623, 0.0026592572685331106, 0.0007439485052600503, 0.0030992375686764717, 0.0029123099520802498, 0.002341120969504118, 0.0054244929924607277, 0.004825737327337265, 0.0033636705484241247, 0.0028727173339575529, 0.0041614538058638573, 0.0032884576357901096, 0.003197862533852458, 0.0039910846389830112, 0.0028350073844194412, 0.0026587978936731815, 0.0024910573847591877, 0.0021144491620361805, 0.0028526517562568188, 0.0018791280454024673, 0.0021609396208077669, 0.0040520476177334785, 0.0059417695738375187, 0.0012675952166318893, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7922, 12770, -3128, 10931, -1780, 2609, -9578, -17701, };
const TfArray<8, float> quant32_scale = { 8, { 0.00021992108668200672, 0.00012871454237028956, 0.00018129318777937442, 9.5596493338234723e-05, 0.00020819835481233895, 0.00013702055730391294, 0.0001451630232622847, 0.00012366792361717671, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -52,10,32,16,-38,-12,5,10,-41,-2,-62,-55,-26,-65,-19,-24,38,-25,33,39,-13,26,-31,10,-1,-40,55,-19,-3,-25,20,12,82,37,29,-127,11,-3,-26,-31,-5,-14,45,39,34,-3,28,5, 
  /* [1][0][][] */ 15,29,78,-27,-20,50,-54,-27,-8,40,-30,-76,9,109,-35,51,-23,35,-51,-67,7,-62,-39,17,-64,-11,-11,-116,-27,-23,30,-40,57,85,-41,-13,127,-39,13,59,-38,50,-85,-28,115,1,-40,-26, 
  /* [2][0][][] */ -3,-25,-70,10,-10,46,21,-2,-6,47,-9,27,63,-83,19,-63,32,-84,30,29,-21,47,-13,19,-11,63,-23,-56,21,18,18,-65,-44,-84,39,-24,93,14,-3,-49,-4,24,79,23,127,14,11,13, 
  /* [3][0][][] */ -11,32,-75,49,13,-41,-79,-105,16,-22,-42,-5,-5,28,32,88,-24,26,-51,19,7,-101,25,-74,-67,-18,127,-28,-42,-3,-67,1,3,-93,8,-22,-26,-35,-26,126,-66,-43,-5,15,29,5,-54,53, 
  /* [4][0][][] */ -28,-45,-14,9,28,-34,-11,-8,27,-23,55,-70,5,25,7,16,-19,-14,11,-13,1,-45,0,-24,20,-6,41,50,48,22,-11,25,-14,-10,6,-8,-62,80,37,-26,26,-26,-16,-28,-76,17,127,4, 
  /* [5][0][][] */ 48,-34,-7,25,25,-38,29,-127,40,-22,-18,99,-75,70,9,-53,-4,-92,31,-5,-44,53,-46,-35,-66,66,-15,-7,-5,54,-30,-35,27,41,39,0,-33,3,-24,-38,5,-25,-41,8,-23,68,84,30, 
  /* [6][0][][] */ 48,-13,23,-5,-45,-13,-31,23,-42,-10,-42,127,-50,-35,-16,44,6,50,13,33,31,-79,-26,13,28,31,-71,4,12,-36,4,22,2,12,-22,-4,12,-6,3,-3,-11,-14,28,52,-11,-38,60,-12, 
  /* [7][0][][] */ -24,-1,-2,71,23,42,0,30,24,2,78,-6,117,108,74,50,43,45,-17,4,29,-36,-98,-16,15,-11,-28,77,21,-32,-35,-1,43,10,34,-97,-71,32,38,58,-28,42,88,127,-61,-33,-107,64, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0093466462567448616, 0.0054703680798411369, 0.0077049601823091507, 0.0040628509595990181, 0.0088484296575188637, 0.0058233733288943768, 0.0061694281175732613, 0.0052558868192136288, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 10548, 3172, 7431, 1409, 445, -6182, -615, 36481, 1285, 4911, 6636, 68549, -431, 7907, -218, 9604, -6547, 14078, 1062, 5314, 9558, 604, 3836, -8462, 14635, 1710, 4696, 22063, -623, 2721, -6926, 7426, 4355, 3824, -2349, 7251, -13262, 19933, 498, 32244, -2130, -3187, 6761, 4678, -1002, 1801, 1933, -588, };
const TfArray<48, float> quant34_scale = { 48, { 0.00010523037781240419, 9.8874879768118262e-05, 0.00012732131290249527, 0.0002135505637852475, 0.00087692053057253361, 0.00013859763566870242, 0.00011044940038118511, 9.7233605629298836e-05, 0.0002054886135738343, 0.00010559266229392961, 7.6650634582620114e-05, 4.1507650166749954e-05, 9.6376781584694982e-05, 4.8398658691439778e-05, 0.00019886600784957409, 9.8104130302090198e-05, 8.5285522800404578e-05, 0.0002752544532995671, 0.00012579491885844618, 0.0001526397536508739, 6.8110915890429169e-05, 0.00043241537059657276, 0.00012578869063872844, 0.00018846789316739887, 7.900661148596555e-05, 0.00013312810915522277, 3.9354086766252294e-05, 5.1283950597280636e-05, 0.00019372014503460377, 0.0010509153362363577, 0.00023411253641825169, 0.00010228128667222336, 9.2498587036971003e-05, 0.00011757346510421485, 0.0001528680877527222, 5.4127100156620145e-05, 4.9429141654400155e-05, 3.0898238037480041e-05, 0.000130498330690898, 5.3054100135341287e-05, 0.00015043612802401185, 0.00018634434673003852, 5.7383935200050473e-05, 7.4535426392685622e-05, 7.7349461207631975e-05, 0.00034706969745457172, 6.0507449234137312e-05, 0.00022482206986751407, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -9,-89,3,-44,127,-41,114,-97,-83,-76,-18,-18,97,58,48,-127,64,-40,7,-18,-97,127,12,15,-40,4,100,-42,85,-79,-5,-35,-99,-89,56,67,-17,72,127,-109,-117,-51,22,35,63,-127,112,43, -68,-127,-66,46,-67,111,79,-64,-61,20,81,-91,127,110,96,-81,-43,-77,36,-40,-93,51,-116,111,-85,24,126,-88,95,-57,3,-90,-29,-103,89,127,66,127,114,-90,-127,-51,47,86,90,88,123,67, -27,4,-106,69,-53,12,35,-8,74,17,34,-88,31,96,-7,-26,-48,-33,41,-15,-71,8,-60,-4,-51,43,94,-127,41,37,114,-40,-29,-18,-8,51,89,106,26,-87,7,105,56,27,64,23,63,-88, 
  /* [0][1][][] */ -38,-92,-12,-89,-64,-57,127,-127,-127,-127,80,-42,89,77,-127,-60,127,-127,-61,-77,-127,67,-53,17,-27,90,94,-40,-102,-88,-13,-34,-102,-71,-127,70,29,62,4,-102,63,-3,66,88,109,88,125,-127, -127,-99,-127,-117,-10,127,112,-77,53,46,127,-127,119,127,67,-80,75,-107,-127,-127,-113,34,-127,127,-127,127,127,-95,-127,127,-12,-127,-93,-127,57,105,89,105,-37,-127,117,-86,99,127,127,-16,127,90, -17,-40,-124,127,59,-8,106,-39,46,3,23,-74,12,100,96,-36,17,-14,-14,-39,-53,3,-67,-16,-95,40,18,-98,-47,27,127,-32,-85,-31,66,64,127,81,-51,-57,62,127,88,41,45,-44,15,16, 
  /* [0][2][][] */ -47,-8,-11,10,-37,-17,6,-69,11,-58,4,-57,6,11,-53,-38,-35,-19,88,-34,-34,-31,-76,-20,-4,99,111,-25,38,49,-13,5,23,-103,-37,49,17,36,-58,-45,29,-13,56,12,27,38,11,-61, -91,-34,-39,-63,72,72,111,-57,74,7,-21,-68,17,56,-123,-50,56,27,47,-75,-21,-28,-87,39,-46,125,84,-85,39,-4,-32,-57,-63,-31,-63,49,30,43,-104,-83,36,-20,127,78,52,-105,29,2, -43,-4,-67,8,-35,26,69,-55,-79,24,2,-44,8,31,44,-17,34,32,13,-72,7,-7,8,-35,-19,62,37,-37,16,-69,33,-10,-127,-30,27,27,40,31,-58,-73,14,66,48,39,19,-5,28,58, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0044722910970449448, 0.0042021824046969414, 0.0054111559875309467, 0.009075898677110672, 0.037269122898578644, 0.0058903996832668781, 0.0046940995380282402, 0.0041324282065033913, 0.0087332660332322121, 0.0044876881875097752, 0.0032576520461589098, 0.0017640751320868731, 0.0040960130281746387, 0.0020569430198520422, 0.0084518054500222206, 0.0041694254614412785, 0.0036246345844119787, 0.011698313988745213, 0.0053462842479348183, 0.0064871893264353275, 0.0028947137761861086, 0.018377652391791344, 0.0053460192866623402, 0.0080098854377865791, 0.0033577808644622564, 0.0056579448282718658, 0.0016725487075746059, 0.0021795679349452257, 0.0082331057637929916, 0.044663902372121811, 0.0099497828632593155, 0.0043469546362757683, 0.0039311898872256279, 0.004996872041374445, 0.0064968937076628208, 0.00230040168389678, 0.0021007384639233351, 0.0013131750747561455, 0.0055461786687374115, 0.0022547992412000895, 0.006393535528331995, 0.0079196346923708916, 0.002438817173242569, 0.0031677556689828634, 0.0032873519230633974, 0.014750462025403976, 0.0025715664960443974, 0.009554937481880188, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1355, -458, 58, 1028, 10284, 995, -486, 6318, 1316, 1037, -6, 2858, 962, 436, -518, 231, 1750, 5188, 2063, -825, 623, -1102, -27, 3528, -652, -823, 1699, 131, 1745, 15733, 3291, -71, 392, 59, 2139, 119, 585, -286, 1430, 1127, 1585, 1204, 392, -229, 628, 1311, 723, -56, };
const TfArray<48, float> quant36_scale = { 48, { 0.00044485752005130053, 0.00056638848036527634, 0.00047619827091693878, 0.00041686507756821811, 9.7847871074918658e-05, 0.00052520522149279714, 0.00051660632016137242, 0.00015469835489057004, 0.00036319968057796359, 0.0005987194599583745, 0.00037274358328431845, 0.00031434462289325893, 0.00028588727582246065, 0.00051821075612679124, 0.00042045701411552727, 0.0004710867942776531, 0.00035313519765622914, 0.00016442184278275818, 0.00035444353125058115, 0.00039817456854507327, 0.00055620702914893627, 0.00025811404339037836, 0.00056327151833102107, 0.00022981133952271193, 0.00038917368510738015, 0.00078056962229311466, 0.00034088041866198182, 0.00068592658499255776, 0.00036105603794567287, 6.625630339840427e-05, 0.00023905212583485991, 0.00079449854092672467, 0.00049823627341538668, 0.00051185023039579391, 0.00034269460593350232, 0.00043344547157175839, 0.00042535268585197628, 0.00068325496977195144, 0.00036360442754812539, 0.00059669266920536757, 0.0003247154236305505, 0.00048991007497534156, 0.00039547117194160819, 0.00053137599024921656, 0.00046282826224341989, 0.00036425614962354302, 0.00040235120104625821, 0.00046688859583809972, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -59,38,-17,-57,-107,-75,-127,-10, 
  /* [1][0][][] */ 111,-86,-76,-72,127,-97,94,23, 
  /* [2][0][][] */ -79,111,-29,-127,50,-36,-20,31, 
  /* [3][0][][] */ 24,36,78,11,99,115,127,-16, 
  /* [4][0][][] */ -39,-127,83,9,-18,-103,10,-25, 
  /* [5][0][][] */ 127,-12,73,59,-37,-9,-12,-12, 
  /* [6][0][][] */ 40,41,127,-35,57,-37,-48,26, 
  /* [7][0][][] */ 24,1,-127,-36,-56,109,122,-87, 
  /* [8][0][][] */ -10,127,-23,-6,82,96,37,39, 
  /* [9][0][][] */ -31,127,-18,51,4,-95,17,99, 
  /* [10][0][][] */ 8,-121,-20,-34,-84,-127,-63,-68, 
  /* [11][0][][] */ -127,-87,87,35,-17,-78,90,48, 
  /* [12][0][][] */ -35,36,-127,59,34,-58,-63,75, 
  /* [13][0][][] */ 76,-127,79,69,-11,43,48,-59, 
  /* [14][0][][] */ -46,99,-52,-127,-22,-63,-10,-61, 
  /* [15][0][][] */ 28,108,17,-24,40,-46,100,-127, 
  /* [16][0][][] */ -127,-108,-49,56,-49,30,-20,63, 
  /* [17][0][][] */ -33,-101,-127,80,-44,57,-64,76, 
  /* [18][0][][] */ -96,-55,-44,89,-27,55,-23,127, 
  /* [19][0][][] */ 70,-127,85,-109,12,-42,27,-37, 
  /* [20][0][][] */ -18,63,13,0,44,127,64,-2, 
  /* [21][0][][] */ 10,105,33,-34,43,-76,83,-127, 
  /* [22][0][][] */ 25,11,103,4,-1,127,32,-43, 
  /* [23][0][][] */ -94,-57,42,-87,112,115,-77,-127, 
  /* [24][0][][] */ -82,-93,46,-73,89,84,-33,-127, 
  /* [25][0][][] */ 127,11,-43,-24,10,22,-55,-16, 
  /* [26][0][][] */ -127,-36,-113,-30,-54,-42,24,-13, 
  /* [27][0][][] */ 66,36,-6,-65,-127,-34,99,73, 
  /* [28][0][][] */ -127,-73,38,65,-91,-89,-4,-23, 
  /* [29][0][][] */ 94,127,15,-124,17,-31,-61,-47, 
  /* [30][0][][] */ -85,-58,34,-80,98,113,-78,-127, 
  /* [31][0][][] */ 46,40,-11,127,11,-54,5,18, 
  /* [32][0][][] */ -27,127,-13,34,23,61,-11,44, 
  /* [33][0][][] */ -23,127,-51,18,30,-31,-37,-4, 
  /* [34][0][][] */ -94,-112,-55,127,-5,20,34,111, 
  /* [35][0][][] */ -47,127,-29,-9,70,111,58,71, 
  /* [36][0][][] */ 70,-3,18,-13,-127,-32,89,78, 
  /* [37][0][][] */ -60,117,15,17,-127,103,-33,-94, 
  /* [38][0][][] */ 50,83,37,6,127,65,108,75, 
  /* [39][0][][] */ -9,-58,26,-15,12,31,-92,127, 
  /* [40][0][][] */ -81,-75,-111,127,-36,-7,21,60, 
  /* [41][0][][] */ 127,15,74,68,-70,-38,13,-28, 
  /* [42][0][][] */ -42,12,-68,-127,60,-110,-3,82, 
  /* [43][0][][] */ 26,0,97,-4,43,127,96,9, 
  /* [44][0][][] */ -18,-15,-51,127,49,10,-31,-54, 
  /* [45][0][][] */ 36,127,97,-102,42,-77,1,-57, 
  /* [46][0][][] */ -25,-127,-45,14,-26,20,-66,124, 
  /* [47][0][][] */ 33,31,127,32,67,108,91,9, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0038505962584167719, 0.0049025435000658035, 0.0041218753904104233, 0.0036082994192838669, 0.00084695126861333847, 0.0045460695400834084, 0.0044716391712427139, 0.0013390375534072518, 0.00314378272742033, 0.0051823938265442848, 0.0032263926696032286, 0.0027209031395614147, 0.0024745820555835962, 0.0044855270534753799, 0.0036393904592841864, 0.004077631514519453, 0.0030566665809601545, 0.0014232021057978272, 0.0030679912306368351, 0.0034465182106941938, 0.0048144147731363773, 0.0022341827861964703, 0.0048755635507404804, 0.0019892002455890179, 0.003368608420714736, 0.0067564519122242928, 0.0029505915008485317, 0.0059372410178184509, 0.0031252277549356222, 0.00057350110728293657, 0.0020691866520792246, 0.0068770176731050014, 0.0043126321397721767, 0.0044304714538156986, 0.002966294763609767, 0.0037518159952014685, 0.0036817663349211216, 0.0059141162782907486, 0.0031472861301153898, 0.0051648505032062531, 0.0028106707613915205, 0.0042405622079968452, 0.003423118032515049, 0.0045994827523827553, 0.0040061473846435547, 0.0031529271509498358, 0.0034826702903956175, 0.004041292704641819, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7542, -3696, 12226, -9659, 23630, 5708, -9358, 11025, };
const TfArray<8, float> quant38_scale = { 8, { 0.00021010317141190171, 0.00025253833155147731, 0.00017693699919618666, 0.00031376117840409279, 0.00018002268916461617, 0.00020463528926484287, 0.00012123428314225748, 0.00034500178298912942, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -2,-13,-13,-70,-17,-46,18,-30,38,11,-38,-9,112,127,-26,-96, 
  /* [1][0][][] */ 127,-56,-40,7,-39,79,-54,-48,-44,82,-40,-44,-18,1,-59,-9, 
  /* [2][0][][] */ -35,-100,52,36,47,-73,-71,-27,29,-82,23,-127,41,-16,-75,15, 
  /* [3][0][][] */ 38,18,11,11,-2,73,-56,-26,127,50,11,19,1,-14,15,20, 
  /* [4][0][][] */ -95,-37,-16,-127,-15,40,47,-124,31,-11,-36,-33,-124,35,-33,-30, 
  /* [5][0][][] */ 88,44,53,-29,42,-46,-127,-127,-10,-71,69,39,-39,44,56,-46, 
  /* [6][0][][] */ 115,46,-125,-90,43,-64,6,-94,-46,23,-127,114,90,-109,21,93, 
  /* [7][0][][] */ -127,-8,83,-21,-65,-5,-7,-49,-42,56,79,-38,68,-21,22,22, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0089293848723173141, 0.010732878930866718, 0.0075198225677013397, 0.0133348498493433, 0.0076509639620780945, 0.0086969994008541107, 0.0051524569280445576, 0.014662575908005238, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 13890, 180, 1078, 2982, -1110, 10, 12483, 1147, -1918, 751, -1911, 3033, -592, -476, -217, -869, };
const TfArray<16, float> quant40_scale = { 16, { 0.00018708886636886746, 0.00027717300690710545, 0.0001384024799335748, 0.00018110031669493765, 0.0011319542536512017, 0.0011775314342230558, 0.00013523772940970957, 0.0012250378495082259, 0.00053973949979990721, 0.0011324086226522923, 0.00034831807715818286, 0.00026444386458024383, 8.2584323536138982e-05, 0.00038104318082332611, 0.00027636994491331279, 0.00064007670152932405, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 2,-14,-1,6,-18,11,2,17,-23,-12,-8,-23,-4,-6,3,-4, 10,-20,-4,6,14,-2,2,-25,-4,8,-14,100,4,20,2,-2, 10,-14,-11,7,3,-13,-10,8,-1,1,-12,-30,12,-8,-12,-1, 
  /* [0][1][][] */ 7,-16,-3,1,127,-24,-127,-20,127,127,2,-27,107,-24,-8,-23, -127,127,127,-4,-84,-91,-28,-100,25,-107,127,127,127,127,127,127, 16,-12,-17,-3,-9,127,-7,-12,-4,-14,-7,-27,22,-7,-19,-9, 
  /* [0][2][][] */ -7,-13,-15,-6,-16,16,55,8,-7,-9,-1,-19,1,-1,-10,-15, 14,-22,-19,-127,8,-15,-12,127,-1,0,7,-34,4,-60,-13,-40, -5,-16,-17,-8,2,-4,-3,-4,1,1,3,-17,15,-10,-14,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0079512763768434525, 0.011779853142797947, 0.0058821053244173527, 0.0076967631466686726, 0.0481080561876297, 0.050045084208250046, 0.005747603252530098, 0.052064109593629837, 0.022938929498195648, 0.048127364367246628, 0.014803518541157246, 0.011238863691687584, 0.0035098337102681398, 0.016194334253668785, 0.011745722033083439, 0.027203259989619255, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -3691, 1660, -6370, 2668, 27926, 47792, 7688, 2801, 2169, -4808, -2326, 2386, 6854, -39174, 138, 59230, };
const TfArray<16, float> quant42_scale = { 16, { 0.00019435223657637835, 0.0011112416395917535, 0.00019284573500044644, 0.00015027020708657801, 6.7316621425561607e-05, 4.5952150685479864e-05, 0.00013238747487775981, 2.1918946004007012e-05, 0.00012332505139056593, 6.0875987401232123e-05, 0.0003731967881321907, 0.00071098149055615067, 0.00046250212471932173, 2.0749035684275441e-05, 0.00088005355792120099, 4.7732242819620296e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -80, -104, -26, 
  /* [0][1][][] */ 68, -33, 19, 
  /* [0][2][][] */ 34, 127, 22, 
  /* [1][0][][] */ 104, -95, -12, 
  /* [1][1][][] */ -127, 102, 22, 
  /* [1][2][][] */ 13, -2, -13, 
  /* [2][0][][] */ -19, 2, -42, 
  /* [2][1][][] */ 39, 96, 127, 
  /* [2][2][][] */ -8, -87, -72, 
  /* [3][0][][] */ 117, 123, 57, 
  /* [3][1][][] */ 0, -23, -15, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 40, -42, 6, 
  /* [4][1][][] */ 32, -127, 5, 
  /* [4][2][][] */ 37, -70, 10, 
  /* [5][0][][] */ -78, 15, 11, 
  /* [5][1][][] */ -127, 29, 17, 
  /* [5][2][][] */ -76, 22, 14, 
  /* [6][0][][] */ -19, 77, 127, 
  /* [6][1][][] */ -54, 52, -18, 
  /* [6][2][][] */ -38, -54, -90, 
  /* [7][0][][] */ 33, 32, -15, 
  /* [7][1][][] */ 127, 61, -19, 
  /* [7][2][][] */ 43, 17, -17, 
  /* [8][0][][] */ -17, -26, 55, 
  /* [8][1][][] */ -49, -82, 127, 
  /* [8][2][][] */ -22, -56, 97, 
  /* [9][0][][] */ -31, 48, -13, 
  /* [9][1][][] */ -23, 127, -21, 
  /* [9][2][][] */ -21, 72, -22, 
  /* [10][0][][] */ 28, 92, 15, 
  /* [10][1][][] */ -35, -127, -27, 
  /* [10][2][][] */ 15, 43, 21, 
  /* [11][0][][] */ 6, -21, 8, 
  /* [11][1][][] */ 64, -96, 34, 
  /* [11][2][][] */ -88, 127, -48, 
  /* [12][0][][] */ -42, 47, -11, 
  /* [12][1][][] */ -127, 111, 4, 
  /* [12][2][][] */ -79, 76, 3, 
  /* [13][0][][] */ 80, 38, -41, 
  /* [13][1][][] */ 127, 105, -40, 
  /* [13][2][][] */ 92, 117, 20, 
  /* [14][0][][] */ -31, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -78, -40, 0, 
  /* [15][1][][] */ -106, -127, 3, 
  /* [15][2][][] */ -4, -48, 12, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.064376518130302429, 0.36808356642723083, 0.063877508044242859, 0.049774948507547379, 0.022297710180282593, 0.015221020206809044, 0.043851539492607117, 0.007260350976139307, 0.040849734097719193, 0.020164337009191513, 0.12361632287502289, 0.23550288379192352, 0.15319749712944031, 0.0068728337064385414, 0.29150569438934326, 0.015810651704668999, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11552951484918594, } };
const TfArray<1, int> quant46_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.08350035548210144, } };
const TfArray<1, int> quant50_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.073848403990268707, } };
const TfArray<1, int> quant53_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.099961839616298676, } };
const TfArray<1, int> quant54_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.055866137146949768, } };
const TfArray<1, int> quant58_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.059092890471220016, } };
const TfArray<1, int> quant61_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.070820480585098267, } };
const TfArray<1, int> quant62_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.023079844191670418, } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.056299973279237747, } };
const TfArray<1, int> quant65_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.096887253224849701, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant62_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.050468727946281433, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13781774044036865, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
